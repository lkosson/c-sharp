// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: meshtastic/powermon.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Meshtastic.Protobufs {

  /// <summary>Holder for reflection information generated from meshtastic/powermon.proto</summary>
  public static partial class PowermonReflection {

    #region Descriptor
    /// <summary>File descriptor for meshtastic/powermon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PowermonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChltZXNodGFzdGljL3Bvd2VybW9uLnByb3RvEgptZXNodGFzdGljIuABCghQ",
            "b3dlck1vbiLTAQoFU3RhdGUSCAoETm9uZRAAEhEKDUNQVV9EZWVwU2xlZXAQ",
            "ARISCg5DUFVfTGlnaHRTbGVlcBACEgwKCFZleHQxX09uEAQSDQoJTG9yYV9S",
            "WE9uEAgSDQoJTG9yYV9UWE9uEBASEQoNTG9yYV9SWEFjdGl2ZRAgEgkKBUJU",
            "X09uEEASCwoGTEVEX09uEIABEg4KCVNjcmVlbl9PbhCAAhITCg5TY3JlZW5f",
            "RHJhd2luZxCABBIMCgdXaWZpX09uEIAIEg8KCkdQU19BY3RpdmUQgBAi/wIK",
            "ElBvd2VyU3RyZXNzTWVzc2FnZRIyCgNjbWQYASABKA4yJS5tZXNodGFzdGlj",
            "LlBvd2VyU3RyZXNzTWVzc2FnZS5PcGNvZGUSEwoLbnVtX3NlY29uZHMYAiAB",
            "KAIinwIKBk9wY29kZRIJCgVVTlNFVBAAEg4KClBSSU5UX0lORk8QARIPCgtG",
            "T1JDRV9RVUlFVBACEg0KCUVORF9RVUlFVBADEg0KCVNDUkVFTl9PThAQEg4K",
            "ClNDUkVFTl9PRkYQERIMCghDUFVfSURMRRAgEhEKDUNQVV9ERUVQU0xFRVAQ",
            "IRIOCgpDUFVfRlVMTE9OECISCgoGTEVEX09OEDASCwoHTEVEX09GRhAxEgwK",
            "CExPUkFfT0ZGEEASCwoHTE9SQV9UWBBBEgsKB0xPUkFfUlgQQhIKCgZCVF9P",
            "RkYQUBIJCgVCVF9PThBREgwKCFdJRklfT0ZGEGASCwoHV0lGSV9PThBhEgsK",
            "B0dQU19PRkYQcBIKCgZHUFNfT04QcUJjChNjb20uZ2Vla3N2aWxsZS5tZXNo",
            "Qg5Qb3dlck1vblByb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dl",
            "bmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.PowerMon), global::Meshtastic.Protobufs.PowerMon.Parser, null, null, new[]{ typeof(global::Meshtastic.Protobufs.PowerMon.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.PowerStressMessage), global::Meshtastic.Protobufs.PowerStressMessage.Parser, new[]{ "Cmd", "NumSeconds" }, null, new[]{ typeof(global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Note: There are no 'PowerMon' messages normally in use (PowerMons are sent only as structured logs - slogs).
  /// But we wrap our State enum in this message to effectively nest a namespace (without our linter yelling at us)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PowerMon : pb::IMessage<PowerMon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PowerMon> _parser = new pb::MessageParser<PowerMon>(() => new PowerMon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PowerMon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.PowermonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerMon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerMon(PowerMon other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerMon Clone() {
      return new PowerMon(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PowerMon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PowerMon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PowerMon other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PowerMon message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Any significant power changing event in meshtastic should be tagged with a powermon state transition.
      /// If you are making new meshtastic features feel free to add new entries at the end of this definition.
      /// </summary>
      public enum State {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("CPU_DeepSleep")] CpuDeepSleep = 1,
        [pbr::OriginalName("CPU_LightSleep")] CpuLightSleep = 2,
        /// <summary>
        ///
        ///The external Vext1 power is on.  Many boards have auxillary power rails that the CPU turns on only
        ///occasionally.  In cases where that rail has multiple devices on it we usually want to have logging on
        ///the state of that rail as an independent record.
        ///For instance on the Heltec Tracker 1.1 board, this rail is the power source for the GPS and screen.
        ///
        ///The log messages will be short and complete (see PowerMon.Event in the protobufs for details).
        ///something like "S:PM:C,0x00001234,REASON" where the hex number is the bitmask of all current states.
        ///(We use a bitmask for states so that if a log message gets lost it won't be fatal)
        /// </summary>
        [pbr::OriginalName("Vext1_On")] Vext1On = 4,
        [pbr::OriginalName("Lora_RXOn")] LoraRxon = 8,
        [pbr::OriginalName("Lora_TXOn")] LoraTxon = 16,
        [pbr::OriginalName("Lora_RXActive")] LoraRxactive = 32,
        [pbr::OriginalName("BT_On")] BtOn = 64,
        [pbr::OriginalName("LED_On")] LedOn = 128,
        [pbr::OriginalName("Screen_On")] ScreenOn = 256,
        [pbr::OriginalName("Screen_Drawing")] ScreenDrawing = 512,
        [pbr::OriginalName("Wifi_On")] WifiOn = 1024,
        /// <summary>
        ///
        /// GPS is actively trying to find our location
        /// See GPSPowerState for more details
        /// </summary>
        [pbr::OriginalName("GPS_Active")] GpsActive = 2048,
      }

    }
    #endregion

  }

  /// <summary>
  ///
  /// PowerStress testing support via the C++ PowerStress module
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PowerStressMessage : pb::IMessage<PowerStressMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PowerStressMessage> _parser = new pb::MessageParser<PowerStressMessage>(() => new PowerStressMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PowerStressMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.PowermonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerStressMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerStressMessage(PowerStressMessage other) : this() {
      cmd_ = other.cmd_;
      numSeconds_ = other.numSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerStressMessage Clone() {
      return new PowerStressMessage(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode cmd_ = global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode.Unset;
    /// <summary>
    ///
    /// What type of HardwareMessage is this?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "num_seconds" field.</summary>
    public const int NumSecondsFieldNumber = 2;
    private float numSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NumSeconds {
      get { return numSeconds_; }
      set {
        numSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PowerStressMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PowerStressMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NumSeconds, other.NumSeconds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode.Unset) hash ^= Cmd.GetHashCode();
      if (NumSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NumSeconds);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cmd != global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode.Unset) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (NumSeconds != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(NumSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cmd != global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode.Unset) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (NumSeconds != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(NumSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      if (NumSeconds != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PowerStressMessage other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode.Unset) {
        Cmd = other.Cmd;
      }
      if (other.NumSeconds != 0F) {
        NumSeconds = other.NumSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cmd = (global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode) input.ReadEnum();
            break;
          }
          case 21: {
            NumSeconds = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cmd = (global::Meshtastic.Protobufs.PowerStressMessage.Types.Opcode) input.ReadEnum();
            break;
          }
          case 21: {
            NumSeconds = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PowerStressMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///
      /// What operation would we like the UUT to perform.
      /// note: senders should probably set want_response in their request packets, so that they can know when the state
      /// machine has started processing their request
      /// </summary>
      public enum Opcode {
        /// <summary>
        ///
        /// Unset/unused
        /// </summary>
        [pbr::OriginalName("UNSET")] Unset = 0,
        /// <summary>
        /// Print board version slog and send an ack that we are alive and ready to process commands
        /// </summary>
        [pbr::OriginalName("PRINT_INFO")] PrintInfo = 1,
        /// <summary>
        /// Try to turn off all automatic processing of packets, screen, sleeping, etc (to make it easier to measure in isolation)
        /// </summary>
        [pbr::OriginalName("FORCE_QUIET")] ForceQuiet = 2,
        /// <summary>
        /// Stop powerstress processing - probably by just rebooting the board
        /// </summary>
        [pbr::OriginalName("END_QUIET")] EndQuiet = 3,
        /// <summary>
        /// Turn the screen on
        /// </summary>
        [pbr::OriginalName("SCREEN_ON")] ScreenOn = 16,
        /// <summary>
        /// Turn the screen off
        /// </summary>
        [pbr::OriginalName("SCREEN_OFF")] ScreenOff = 17,
        /// <summary>
        /// Let the CPU run but we assume mostly idling for num_seconds
        /// </summary>
        [pbr::OriginalName("CPU_IDLE")] CpuIdle = 32,
        /// <summary>
        /// Force deep sleep for FIXME seconds
        /// </summary>
        [pbr::OriginalName("CPU_DEEPSLEEP")] CpuDeepsleep = 33,
        /// <summary>
        /// Spin the CPU as fast as possible for num_seconds
        /// </summary>
        [pbr::OriginalName("CPU_FULLON")] CpuFullon = 34,
        /// <summary>
        /// Turn the LED on for num_seconds (and leave it on - for baseline power measurement purposes)
        /// </summary>
        [pbr::OriginalName("LED_ON")] LedOn = 48,
        /// <summary>
        /// Force the LED off for num_seconds
        /// </summary>
        [pbr::OriginalName("LED_OFF")] LedOff = 49,
        /// <summary>
        /// Completely turn off the LORA radio for num_seconds
        /// </summary>
        [pbr::OriginalName("LORA_OFF")] LoraOff = 64,
        /// <summary>
        /// Send Lora packets for num_seconds
        /// </summary>
        [pbr::OriginalName("LORA_TX")] LoraTx = 65,
        /// <summary>
        /// Receive Lora packets for num_seconds (node will be mostly just listening, unless an external agent is helping stress this by sending packets on the current channel)
        /// </summary>
        [pbr::OriginalName("LORA_RX")] LoraRx = 66,
        /// <summary>
        /// Turn off the BT radio for num_seconds
        /// </summary>
        [pbr::OriginalName("BT_OFF")] BtOff = 80,
        /// <summary>
        /// Turn on the BT radio for num_seconds
        /// </summary>
        [pbr::OriginalName("BT_ON")] BtOn = 81,
        /// <summary>
        /// Turn off the WIFI radio for num_seconds
        /// </summary>
        [pbr::OriginalName("WIFI_OFF")] WifiOff = 96,
        /// <summary>
        /// Turn on the WIFI radio for num_seconds
        /// </summary>
        [pbr::OriginalName("WIFI_ON")] WifiOn = 97,
        /// <summary>
        /// Turn off the GPS radio for num_seconds
        /// </summary>
        [pbr::OriginalName("GPS_OFF")] GpsOff = 112,
        /// <summary>
        /// Turn on the GPS radio for num_seconds
        /// </summary>
        [pbr::OriginalName("GPS_ON")] GpsOn = 113,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
