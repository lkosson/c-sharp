// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: meshtastic/telemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Meshtastic.Protobufs {

  /// <summary>Holder for reflection information generated from meshtastic/telemetry.proto</summary>
  public static partial class TelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for meshtastic/telemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChptZXNodGFzdGljL3RlbGVtZXRyeS5wcm90bxIKbWVzaHRhc3RpYyLzAQoN",
            "RGV2aWNlTWV0cmljcxIaCg1iYXR0ZXJ5X2xldmVsGAEgASgNSACIAQESFAoH",
            "dm9sdGFnZRgCIAEoAkgBiAEBEiAKE2NoYW5uZWxfdXRpbGl6YXRpb24YAyAB",
            "KAJIAogBARIYCgthaXJfdXRpbF90eBgEIAEoAkgDiAEBEhsKDnVwdGltZV9z",
            "ZWNvbmRzGAUgASgNSASIAQFCEAoOX2JhdHRlcnlfbGV2ZWxCCgoIX3ZvbHRh",
            "Z2VCFgoUX2NoYW5uZWxfdXRpbGl6YXRpb25CDgoMX2Fpcl91dGlsX3R4QhEK",
            "D191cHRpbWVfc2Vjb25kcyKCBwoSRW52aXJvbm1lbnRNZXRyaWNzEhgKC3Rl",
            "bXBlcmF0dXJlGAEgASgCSACIAQESHgoRcmVsYXRpdmVfaHVtaWRpdHkYAiAB",
            "KAJIAYgBARIgChNiYXJvbWV0cmljX3ByZXNzdXJlGAMgASgCSAKIAQESGwoO",
            "Z2FzX3Jlc2lzdGFuY2UYBCABKAJIA4gBARIUCgd2b2x0YWdlGAUgASgCSASI",
            "AQESFAoHY3VycmVudBgGIAEoAkgFiAEBEhAKA2lhcRgHIAEoDUgGiAEBEhUK",
            "CGRpc3RhbmNlGAggASgCSAeIAQESEAoDbHV4GAkgASgCSAiIAQESFgoJd2hp",
            "dGVfbHV4GAogASgCSAmIAQESEwoGaXJfbHV4GAsgASgCSAqIAQESEwoGdXZf",
            "bHV4GAwgASgCSAuIAQESGwoOd2luZF9kaXJlY3Rpb24YDSABKA1IDIgBARIX",
            "Cgp3aW5kX3NwZWVkGA4gASgCSA2IAQESEwoGd2VpZ2h0GA8gASgCSA6IAQES",
            "FgoJd2luZF9ndXN0GBAgASgCSA+IAQESFgoJd2luZF9sdWxsGBEgASgCSBCI",
            "AQESFgoJcmFkaWF0aW9uGBIgASgCSBGIAQESGAoLcmFpbmZhbGxfMWgYEyAB",
            "KAJIEogBARIZCgxyYWluZmFsbF8yNGgYFCABKAJIE4gBARIaCg1zb2lsX21v",
            "aXN0dXJlGBUgASgNSBSIAQESHQoQc29pbF90ZW1wZXJhdHVyZRgWIAEoAkgV",
            "iAEBQg4KDF90ZW1wZXJhdHVyZUIUChJfcmVsYXRpdmVfaHVtaWRpdHlCFgoU",
            "X2Jhcm9tZXRyaWNfcHJlc3N1cmVCEQoPX2dhc19yZXNpc3RhbmNlQgoKCF92",
            "b2x0YWdlQgoKCF9jdXJyZW50QgYKBF9pYXFCCwoJX2Rpc3RhbmNlQgYKBF9s",
            "dXhCDAoKX3doaXRlX2x1eEIJCgdfaXJfbHV4QgkKB191dl9sdXhCEQoPX3dp",
            "bmRfZGlyZWN0aW9uQg0KC193aW5kX3NwZWVkQgkKB193ZWlnaHRCDAoKX3dp",
            "bmRfZ3VzdEIMCgpfd2luZF9sdWxsQgwKCl9yYWRpYXRpb25CDgoMX3JhaW5m",
            "YWxsXzFoQg8KDV9yYWluZmFsbF8yNGhCEAoOX3NvaWxfbW9pc3R1cmVCEwoR",
            "X3NvaWxfdGVtcGVyYXR1cmUirgUKDFBvd2VyTWV0cmljcxIYCgtjaDFfdm9s",
            "dGFnZRgBIAEoAkgAiAEBEhgKC2NoMV9jdXJyZW50GAIgASgCSAGIAQESGAoL",
            "Y2gyX3ZvbHRhZ2UYAyABKAJIAogBARIYCgtjaDJfY3VycmVudBgEIAEoAkgD",
            "iAEBEhgKC2NoM192b2x0YWdlGAUgASgCSASIAQESGAoLY2gzX2N1cnJlbnQY",
            "BiABKAJIBYgBARIYCgtjaDRfdm9sdGFnZRgHIAEoAkgGiAEBEhgKC2NoNF9j",
            "dXJyZW50GAggASgCSAeIAQESGAoLY2g1X3ZvbHRhZ2UYCSABKAJICIgBARIY",
            "CgtjaDVfY3VycmVudBgKIAEoAkgJiAEBEhgKC2NoNl92b2x0YWdlGAsgASgC",
            "SAqIAQESGAoLY2g2X2N1cnJlbnQYDCABKAJIC4gBARIYCgtjaDdfdm9sdGFn",
            "ZRgNIAEoAkgMiAEBEhgKC2NoN19jdXJyZW50GA4gASgCSA2IAQESGAoLY2g4",
            "X3ZvbHRhZ2UYDyABKAJIDogBARIYCgtjaDhfY3VycmVudBgQIAEoAkgPiAEB",
            "Qg4KDF9jaDFfdm9sdGFnZUIOCgxfY2gxX2N1cnJlbnRCDgoMX2NoMl92b2x0",
            "YWdlQg4KDF9jaDJfY3VycmVudEIOCgxfY2gzX3ZvbHRhZ2VCDgoMX2NoM19j",
            "dXJyZW50Qg4KDF9jaDRfdm9sdGFnZUIOCgxfY2g0X2N1cnJlbnRCDgoMX2No",
            "NV92b2x0YWdlQg4KDF9jaDVfY3VycmVudEIOCgxfY2g2X3ZvbHRhZ2VCDgoM",
            "X2NoNl9jdXJyZW50Qg4KDF9jaDdfdm9sdGFnZUIOCgxfY2g3X2N1cnJlbnRC",
            "DgoMX2NoOF92b2x0YWdlQg4KDF9jaDhfY3VycmVudCLjBQoRQWlyUXVhbGl0",
            "eU1ldHJpY3MSGgoNcG0xMF9zdGFuZGFyZBgBIAEoDUgAiAEBEhoKDXBtMjVf",
            "c3RhbmRhcmQYAiABKA1IAYgBARIbCg5wbTEwMF9zdGFuZGFyZBgDIAEoDUgC",
            "iAEBEh8KEnBtMTBfZW52aXJvbm1lbnRhbBgEIAEoDUgDiAEBEh8KEnBtMjVf",
            "ZW52aXJvbm1lbnRhbBgFIAEoDUgEiAEBEiAKE3BtMTAwX2Vudmlyb25tZW50",
            "YWwYBiABKA1IBYgBARIbCg5wYXJ0aWNsZXNfMDN1bRgHIAEoDUgGiAEBEhsK",
            "DnBhcnRpY2xlc18wNXVtGAggASgNSAeIAQESGwoOcGFydGljbGVzXzEwdW0Y",
            "CSABKA1ICIgBARIbCg5wYXJ0aWNsZXNfMjV1bRgKIAEoDUgJiAEBEhsKDnBh",
            "cnRpY2xlc181MHVtGAsgASgNSAqIAQESHAoPcGFydGljbGVzXzEwMHVtGAwg",
            "ASgNSAuIAQESEAoDY28yGA0gASgNSAyIAQESHAoPY28yX3RlbXBlcmF0dXJl",
            "GA4gASgCSA2IAQESGQoMY28yX2h1bWlkaXR5GA8gASgCSA6IAQFCEAoOX3Bt",
            "MTBfc3RhbmRhcmRCEAoOX3BtMjVfc3RhbmRhcmRCEQoPX3BtMTAwX3N0YW5k",
            "YXJkQhUKE19wbTEwX2Vudmlyb25tZW50YWxCFQoTX3BtMjVfZW52aXJvbm1l",
            "bnRhbEIWChRfcG0xMDBfZW52aXJvbm1lbnRhbEIRCg9fcGFydGljbGVzXzAz",
            "dW1CEQoPX3BhcnRpY2xlc18wNXVtQhEKD19wYXJ0aWNsZXNfMTB1bUIRCg9f",
            "cGFydGljbGVzXzI1dW1CEQoPX3BhcnRpY2xlc181MHVtQhIKEF9wYXJ0aWNs",
            "ZXNfMTAwdW1CBgoEX2NvMkISChBfY28yX3RlbXBlcmF0dXJlQg8KDV9jbzJf",
            "aHVtaWRpdHki0gIKCkxvY2FsU3RhdHMSFgoOdXB0aW1lX3NlY29uZHMYASAB",
            "KA0SGwoTY2hhbm5lbF91dGlsaXphdGlvbhgCIAEoAhITCgthaXJfdXRpbF90",
            "eBgDIAEoAhIWCg5udW1fcGFja2V0c190eBgEIAEoDRIWCg5udW1fcGFja2V0",
            "c19yeBgFIAEoDRIaChJudW1fcGFja2V0c19yeF9iYWQYBiABKA0SGAoQbnVt",
            "X29ubGluZV9ub2RlcxgHIAEoDRIXCg9udW1fdG90YWxfbm9kZXMYCCABKA0S",
            "EwoLbnVtX3J4X2R1cGUYCSABKA0SFAoMbnVtX3R4X3JlbGF5GAogASgNEh0K",
            "FW51bV90eF9yZWxheV9jYW5jZWxlZBgLIAEoDRIYChBoZWFwX3RvdGFsX2J5",
            "dGVzGAwgASgNEhcKD2hlYXBfZnJlZV9ieXRlcxgNIAEoDSJ7Cg1IZWFsdGhN",
            "ZXRyaWNzEhYKCWhlYXJ0X2JwbRgBIAEoDUgAiAEBEhEKBHNwTzIYAiABKA1I",
            "AYgBARIYCgt0ZW1wZXJhdHVyZRgDIAEoAkgCiAEBQgwKCl9oZWFydF9icG1C",
            "BwoFX3NwTzJCDgoMX3RlbXBlcmF0dXJlIpECCgtIb3N0TWV0cmljcxIWCg51",
            "cHRpbWVfc2Vjb25kcxgBIAEoDRIVCg1mcmVlbWVtX2J5dGVzGAIgASgEEhcK",
            "D2Rpc2tmcmVlMV9ieXRlcxgDIAEoBBIcCg9kaXNrZnJlZTJfYnl0ZXMYBCAB",
            "KARIAIgBARIcCg9kaXNrZnJlZTNfYnl0ZXMYBSABKARIAYgBARINCgVsb2Fk",
            "MRgGIAEoDRINCgVsb2FkNRgHIAEoDRIOCgZsb2FkMTUYCCABKA0SGAoLdXNl",
            "cl9zdHJpbmcYCSABKAlIAogBAUISChBfZGlza2ZyZWUyX2J5dGVzQhIKEF9k",
            "aXNrZnJlZTNfYnl0ZXNCDgoMX3VzZXJfc3RyaW5nIp4DCglUZWxlbWV0cnkS",
            "DAoEdGltZRgBIAEoBxIzCg5kZXZpY2VfbWV0cmljcxgCIAEoCzIZLm1lc2h0",
            "YXN0aWMuRGV2aWNlTWV0cmljc0gAEj0KE2Vudmlyb25tZW50X21ldHJpY3MY",
            "AyABKAsyHi5tZXNodGFzdGljLkVudmlyb25tZW50TWV0cmljc0gAEjwKE2Fp",
            "cl9xdWFsaXR5X21ldHJpY3MYBCABKAsyHS5tZXNodGFzdGljLkFpclF1YWxp",
            "dHlNZXRyaWNzSAASMQoNcG93ZXJfbWV0cmljcxgFIAEoCzIYLm1lc2h0YXN0",
            "aWMuUG93ZXJNZXRyaWNzSAASLQoLbG9jYWxfc3RhdHMYBiABKAsyFi5tZXNo",
            "dGFzdGljLkxvY2FsU3RhdHNIABIzCg5oZWFsdGhfbWV0cmljcxgHIAEoCzIZ",
            "Lm1lc2h0YXN0aWMuSGVhbHRoTWV0cmljc0gAEi8KDGhvc3RfbWV0cmljcxgI",
            "IAEoCzIXLm1lc2h0YXN0aWMuSG9zdE1ldHJpY3NIAEIJCgd2YXJpYW50Ij4K",
            "DU5hdTc4MDJDb25maWcSEgoKemVyb09mZnNldBgBIAEoBRIZChFjYWxpYnJh",
            "dGlvbkZhY3RvchgCIAEoAiq5BAoTVGVsZW1ldHJ5U2Vuc29yVHlwZRIQCgxT",
            "RU5TT1JfVU5TRVQQABIKCgZCTUUyODAQARIKCgZCTUU2ODAQAhILCgdNQ1A5",
            "ODA4EAMSCgoGSU5BMjYwEAQSCgoGSU5BMjE5EAUSCgoGQk1QMjgwEAYSCQoF",
            "U0hUQzMQBxIJCgVMUFMyMhAIEgsKB1FNQzYzMTAQCRILCgdRTUk4NjU4EAoS",
            "DAoIUU1DNTg4M0wQCxIJCgVTSFQzMRAMEgwKCFBNU0EwMDNJEA0SCwoHSU5B",
            "MzIyMRAOEgoKBkJNUDA4NRAPEgwKCFJDV0w5NjIwEBASCQoFU0hUNFgQERIM",
            "CghWRU1MNzcwMBASEgwKCE1MWDkwNjMyEBMSCwoHT1BUMzAwMRAUEgwKCExU",
            "UjM5MFVWEBUSDgoKVFNMMjU5MTFGThAWEgkKBUFIVDEwEBcSEAoMREZST0JP",
            "VF9MQVJLEBgSCwoHTkFVNzgwMhAZEgoKBkJNUDNYWBAaEgwKCElDTTIwOTQ4",
            "EBsSDAoITUFYMTcwNDgQHBIRCg1DVVNUT01fU0VOU09SEB0SDAoITUFYMzAx",
            "MDIQHhIMCghNTFg5MDYxNBAfEgkKBVNDRDRYECASCwoHUkFEU0VOUxAhEgoK",
            "BklOQTIyNhAiEhAKDERGUk9CT1RfUkFJThAjEgoKBkRQUzMxMBAkEgwKCFJB",
            "SzEyMDM1ECUSDAoITUFYMTcyNjEQJhILCgdQQ1QyMDc1ECcSCwoHQURTMVgx",
            "NRAoQmQKE2NvbS5nZWVrc3ZpbGxlLm1lc2hCD1RlbGVtZXRyeVByb3Rvc1oi",
            "Z2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0",
            "aWMuUHJvdG9idWZzugIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Meshtastic.Protobufs.TelemetrySensorType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.DeviceMetrics), global::Meshtastic.Protobufs.DeviceMetrics.Parser, new[]{ "BatteryLevel", "Voltage", "ChannelUtilization", "AirUtilTx", "UptimeSeconds" }, new[]{ "BatteryLevel", "Voltage", "ChannelUtilization", "AirUtilTx", "UptimeSeconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.EnvironmentMetrics), global::Meshtastic.Protobufs.EnvironmentMetrics.Parser, new[]{ "Temperature", "RelativeHumidity", "BarometricPressure", "GasResistance", "Voltage", "Current", "Iaq", "Distance", "Lux", "WhiteLux", "IrLux", "UvLux", "WindDirection", "WindSpeed", "Weight", "WindGust", "WindLull", "Radiation", "Rainfall1H", "Rainfall24H", "SoilMoisture", "SoilTemperature" }, new[]{ "Temperature", "RelativeHumidity", "BarometricPressure", "GasResistance", "Voltage", "Current", "Iaq", "Distance", "Lux", "WhiteLux", "IrLux", "UvLux", "WindDirection", "WindSpeed", "Weight", "WindGust", "WindLull", "Radiation", "Rainfall1H", "Rainfall24H", "SoilMoisture", "SoilTemperature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.PowerMetrics), global::Meshtastic.Protobufs.PowerMetrics.Parser, new[]{ "Ch1Voltage", "Ch1Current", "Ch2Voltage", "Ch2Current", "Ch3Voltage", "Ch3Current", "Ch4Voltage", "Ch4Current", "Ch5Voltage", "Ch5Current", "Ch6Voltage", "Ch6Current", "Ch7Voltage", "Ch7Current", "Ch8Voltage", "Ch8Current" }, new[]{ "Ch1Voltage", "Ch1Current", "Ch2Voltage", "Ch2Current", "Ch3Voltage", "Ch3Current", "Ch4Voltage", "Ch4Current", "Ch5Voltage", "Ch5Current", "Ch6Voltage", "Ch6Current", "Ch7Voltage", "Ch7Current", "Ch8Voltage", "Ch8Current" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.AirQualityMetrics), global::Meshtastic.Protobufs.AirQualityMetrics.Parser, new[]{ "Pm10Standard", "Pm25Standard", "Pm100Standard", "Pm10Environmental", "Pm25Environmental", "Pm100Environmental", "Particles03Um", "Particles05Um", "Particles10Um", "Particles25Um", "Particles50Um", "Particles100Um", "Co2", "Co2Temperature", "Co2Humidity" }, new[]{ "Pm10Standard", "Pm25Standard", "Pm100Standard", "Pm10Environmental", "Pm25Environmental", "Pm100Environmental", "Particles03Um", "Particles05Um", "Particles10Um", "Particles25Um", "Particles50Um", "Particles100Um", "Co2", "Co2Temperature", "Co2Humidity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.LocalStats), global::Meshtastic.Protobufs.LocalStats.Parser, new[]{ "UptimeSeconds", "ChannelUtilization", "AirUtilTx", "NumPacketsTx", "NumPacketsRx", "NumPacketsRxBad", "NumOnlineNodes", "NumTotalNodes", "NumRxDupe", "NumTxRelay", "NumTxRelayCanceled", "HeapTotalBytes", "HeapFreeBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.HealthMetrics), global::Meshtastic.Protobufs.HealthMetrics.Parser, new[]{ "HeartBpm", "SpO2", "Temperature" }, new[]{ "HeartBpm", "SpO2", "Temperature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.HostMetrics), global::Meshtastic.Protobufs.HostMetrics.Parser, new[]{ "UptimeSeconds", "FreememBytes", "Diskfree1Bytes", "Diskfree2Bytes", "Diskfree3Bytes", "Load1", "Load5", "Load15", "UserString" }, new[]{ "Diskfree2Bytes", "Diskfree3Bytes", "UserString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Telemetry), global::Meshtastic.Protobufs.Telemetry.Parser, new[]{ "Time", "DeviceMetrics", "EnvironmentMetrics", "AirQualityMetrics", "PowerMetrics", "LocalStats", "HealthMetrics", "HostMetrics" }, new[]{ "Variant" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Nau7802Config), global::Meshtastic.Protobufs.Nau7802Config.Parser, new[]{ "ZeroOffset", "CalibrationFactor" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  /// Supported I2C Sensors for telemetry in Meshtastic
  /// </summary>
  public enum TelemetrySensorType {
    /// <summary>
    ///
    /// No external telemetry sensor explicitly set
    /// </summary>
    [pbr::OriginalName("SENSOR_UNSET")] SensorUnset = 0,
    /// <summary>
    ///
    /// High accuracy temperature, pressure, humidity
    /// </summary>
    [pbr::OriginalName("BME280")] Bme280 = 1,
    /// <summary>
    ///
    /// High accuracy temperature, pressure, humidity, and air resistance
    /// </summary>
    [pbr::OriginalName("BME680")] Bme680 = 2,
    /// <summary>
    ///
    /// Very high accuracy temperature
    /// </summary>
    [pbr::OriginalName("MCP9808")] Mcp9808 = 3,
    /// <summary>
    ///
    /// Moderate accuracy current and voltage
    /// </summary>
    [pbr::OriginalName("INA260")] Ina260 = 4,
    /// <summary>
    ///
    /// Moderate accuracy current and voltage
    /// </summary>
    [pbr::OriginalName("INA219")] Ina219 = 5,
    /// <summary>
    ///
    /// High accuracy temperature and pressure
    /// </summary>
    [pbr::OriginalName("BMP280")] Bmp280 = 6,
    /// <summary>
    ///
    /// High accuracy temperature and humidity
    /// </summary>
    [pbr::OriginalName("SHTC3")] Shtc3 = 7,
    /// <summary>
    ///
    /// High accuracy pressure
    /// </summary>
    [pbr::OriginalName("LPS22")] Lps22 = 8,
    /// <summary>
    ///
    /// 3-Axis magnetic sensor
    /// </summary>
    [pbr::OriginalName("QMC6310")] Qmc6310 = 9,
    /// <summary>
    ///
    /// 6-Axis inertial measurement sensor
    /// </summary>
    [pbr::OriginalName("QMI8658")] Qmi8658 = 10,
    /// <summary>
    ///
    /// 3-Axis magnetic sensor
    /// </summary>
    [pbr::OriginalName("QMC5883L")] Qmc5883L = 11,
    /// <summary>
    ///
    /// High accuracy temperature and humidity
    /// </summary>
    [pbr::OriginalName("SHT31")] Sht31 = 12,
    /// <summary>
    ///
    /// PM2.5 air quality sensor
    /// </summary>
    [pbr::OriginalName("PMSA003I")] Pmsa003I = 13,
    /// <summary>
    ///
    /// INA3221 3 Channel Voltage / Current Sensor
    /// </summary>
    [pbr::OriginalName("INA3221")] Ina3221 = 14,
    /// <summary>
    ///
    /// BMP085/BMP180 High accuracy temperature and pressure (older Version of BMP280)
    /// </summary>
    [pbr::OriginalName("BMP085")] Bmp085 = 15,
    /// <summary>
    ///
    /// RCWL-9620 Doppler Radar Distance Sensor, used for water level detection
    /// </summary>
    [pbr::OriginalName("RCWL9620")] Rcwl9620 = 16,
    /// <summary>
    ///
    /// Sensirion High accuracy temperature and humidity
    /// </summary>
    [pbr::OriginalName("SHT4X")] Sht4X = 17,
    /// <summary>
    ///
    /// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
    /// </summary>
    [pbr::OriginalName("VEML7700")] Veml7700 = 18,
    /// <summary>
    ///
    /// MLX90632 non-contact IR temperature sensor.
    /// </summary>
    [pbr::OriginalName("MLX90632")] Mlx90632 = 19,
    /// <summary>
    ///
    /// TI OPT3001 Ambient Light Sensor
    /// </summary>
    [pbr::OriginalName("OPT3001")] Opt3001 = 20,
    /// <summary>
    ///
    /// Lite On LTR-390UV-01 UV Light Sensor
    /// </summary>
    [pbr::OriginalName("LTR390UV")] Ltr390Uv = 21,
    /// <summary>
    ///
    /// AMS TSL25911FN RGB Light Sensor
    /// </summary>
    [pbr::OriginalName("TSL25911FN")] Tsl25911Fn = 22,
    /// <summary>
    ///
    /// AHT10 Integrated temperature and humidity sensor
    /// </summary>
    [pbr::OriginalName("AHT10")] Aht10 = 23,
    /// <summary>
    ///
    /// DFRobot Lark Weather station (temperature, humidity, pressure, wind speed and direction)
    /// </summary>
    [pbr::OriginalName("DFROBOT_LARK")] DfrobotLark = 24,
    /// <summary>
    ///
    /// NAU7802 Scale Chip or compatible
    /// </summary>
    [pbr::OriginalName("NAU7802")] Nau7802 = 25,
    /// <summary>
    ///
    /// BMP3XX High accuracy temperature and pressure
    /// </summary>
    [pbr::OriginalName("BMP3XX")] Bmp3Xx = 26,
    /// <summary>
    ///
    /// ICM-20948 9-Axis digital motion processor
    /// </summary>
    [pbr::OriginalName("ICM20948")] Icm20948 = 27,
    /// <summary>
    ///
    /// MAX17048 1S lipo battery sensor (voltage, state of charge, time to go)
    /// </summary>
    [pbr::OriginalName("MAX17048")] Max17048 = 28,
    /// <summary>
    ///
    /// Custom I2C sensor implementation based on https://github.com/meshtastic/i2c-sensor
    /// </summary>
    [pbr::OriginalName("CUSTOM_SENSOR")] CustomSensor = 29,
    /// <summary>
    ///
    /// MAX30102 Pulse Oximeter and Heart-Rate Sensor
    /// </summary>
    [pbr::OriginalName("MAX30102")] Max30102 = 30,
    /// <summary>
    ///
    /// MLX90614 non-contact IR temperature sensor
    /// </summary>
    [pbr::OriginalName("MLX90614")] Mlx90614 = 31,
    /// <summary>
    ///
    /// SCD40/SCD41 CO2, humidity, temperature sensor
    /// </summary>
    [pbr::OriginalName("SCD4X")] Scd4X = 32,
    /// <summary>
    ///
    /// ClimateGuard RadSens, radiation, Geiger-Muller Tube
    /// </summary>
    [pbr::OriginalName("RADSENS")] Radsens = 33,
    /// <summary>
    ///
    /// High accuracy current and voltage
    /// </summary>
    [pbr::OriginalName("INA226")] Ina226 = 34,
    /// <summary>
    ///
    /// DFRobot Gravity tipping bucket rain gauge
    /// </summary>
    [pbr::OriginalName("DFROBOT_RAIN")] DfrobotRain = 35,
    /// <summary>
    ///
    /// Infineon DPS310 High accuracy pressure and temperature
    /// </summary>
    [pbr::OriginalName("DPS310")] Dps310 = 36,
    /// <summary>
    ///
    /// RAKWireless RAK12035 Soil Moisture Sensor Module
    /// </summary>
    [pbr::OriginalName("RAK12035")] Rak12035 = 37,
    /// <summary>
    ///
    /// MAX17261 lipo battery gauge
    /// </summary>
    [pbr::OriginalName("MAX17261")] Max17261 = 38,
    /// <summary>
    ///
    /// PCT2075 Temperature Sensor
    /// </summary>
    [pbr::OriginalName("PCT2075")] Pct2075 = 39,
    /// <summary>
    ///
    /// ADS1X15 ADC
    /// </summary>
    [pbr::OriginalName("ADS1X15")] Ads1X15 = 40,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  /// Key native device metrics such as battery level
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DeviceMetrics : pb::IMessage<DeviceMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceMetrics> _parser = new pb::MessageParser<DeviceMetrics>(() => new DeviceMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetrics(DeviceMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      batteryLevel_ = other.batteryLevel_;
      voltage_ = other.voltage_;
      channelUtilization_ = other.channelUtilization_;
      airUtilTx_ = other.airUtilTx_;
      uptimeSeconds_ = other.uptimeSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetrics Clone() {
      return new DeviceMetrics(this);
    }

    /// <summary>Field number for the "battery_level" field.</summary>
    public const int BatteryLevelFieldNumber = 1;
    private readonly static uint BatteryLevelDefaultValue = 0;

    private uint batteryLevel_;
    /// <summary>
    ///
    /// 0-100 (>100 means powered)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BatteryLevel {
      get { if ((_hasBits0 & 1) != 0) { return batteryLevel_; } else { return BatteryLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        batteryLevel_ = value;
      }
    }
    /// <summary>Gets whether the "battery_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBatteryLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "battery_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBatteryLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 2;
    private readonly static float VoltageDefaultValue = 0F;

    private float voltage_;
    /// <summary>
    ///
    /// Voltage measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Voltage {
      get { if ((_hasBits0 & 2) != 0) { return voltage_; } else { return VoltageDefaultValue; } }
      set {
        _hasBits0 |= 2;
        voltage_ = value;
      }
    }
    /// <summary>Gets whether the "voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVoltage {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVoltage() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "channel_utilization" field.</summary>
    public const int ChannelUtilizationFieldNumber = 3;
    private readonly static float ChannelUtilizationDefaultValue = 0F;

    private float channelUtilization_;
    /// <summary>
    ///
    /// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChannelUtilization {
      get { if ((_hasBits0 & 4) != 0) { return channelUtilization_; } else { return ChannelUtilizationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        channelUtilization_ = value;
      }
    }
    /// <summary>Gets whether the "channel_utilization" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChannelUtilization {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "channel_utilization" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChannelUtilization() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "air_util_tx" field.</summary>
    public const int AirUtilTxFieldNumber = 4;
    private readonly static float AirUtilTxDefaultValue = 0F;

    private float airUtilTx_;
    /// <summary>
    ///
    /// Percent of airtime for transmission used within the last hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirUtilTx {
      get { if ((_hasBits0 & 8) != 0) { return airUtilTx_; } else { return AirUtilTxDefaultValue; } }
      set {
        _hasBits0 |= 8;
        airUtilTx_ = value;
      }
    }
    /// <summary>Gets whether the "air_util_tx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAirUtilTx {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "air_util_tx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAirUtilTx() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "uptime_seconds" field.</summary>
    public const int UptimeSecondsFieldNumber = 5;
    private readonly static uint UptimeSecondsDefaultValue = 0;

    private uint uptimeSeconds_;
    /// <summary>
    ///
    /// How long the device has been running since the last reboot (in seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UptimeSeconds {
      get { if ((_hasBits0 & 16) != 0) { return uptimeSeconds_; } else { return UptimeSecondsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uptimeSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "uptime_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUptimeSeconds {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uptime_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUptimeSeconds() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatteryLevel != other.BatteryLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelUtilization, other.ChannelUtilization)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirUtilTx, other.AirUtilTx)) return false;
      if (UptimeSeconds != other.UptimeSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBatteryLevel) hash ^= BatteryLevel.GetHashCode();
      if (HasVoltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Voltage);
      if (HasChannelUtilization) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelUtilization);
      if (HasAirUtilTx) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirUtilTx);
      if (HasUptimeSeconds) hash ^= UptimeSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBatteryLevel) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatteryLevel);
      }
      if (HasVoltage) {
        output.WriteRawTag(21);
        output.WriteFloat(Voltage);
      }
      if (HasChannelUtilization) {
        output.WriteRawTag(29);
        output.WriteFloat(ChannelUtilization);
      }
      if (HasAirUtilTx) {
        output.WriteRawTag(37);
        output.WriteFloat(AirUtilTx);
      }
      if (HasUptimeSeconds) {
        output.WriteRawTag(40);
        output.WriteUInt32(UptimeSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBatteryLevel) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatteryLevel);
      }
      if (HasVoltage) {
        output.WriteRawTag(21);
        output.WriteFloat(Voltage);
      }
      if (HasChannelUtilization) {
        output.WriteRawTag(29);
        output.WriteFloat(ChannelUtilization);
      }
      if (HasAirUtilTx) {
        output.WriteRawTag(37);
        output.WriteFloat(AirUtilTx);
      }
      if (HasUptimeSeconds) {
        output.WriteRawTag(40);
        output.WriteUInt32(UptimeSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBatteryLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatteryLevel);
      }
      if (HasVoltage) {
        size += 1 + 4;
      }
      if (HasChannelUtilization) {
        size += 1 + 4;
      }
      if (HasAirUtilTx) {
        size += 1 + 4;
      }
      if (HasUptimeSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UptimeSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceMetrics other) {
      if (other == null) {
        return;
      }
      if (other.HasBatteryLevel) {
        BatteryLevel = other.BatteryLevel;
      }
      if (other.HasVoltage) {
        Voltage = other.Voltage;
      }
      if (other.HasChannelUtilization) {
        ChannelUtilization = other.ChannelUtilization;
      }
      if (other.HasAirUtilTx) {
        AirUtilTx = other.AirUtilTx;
      }
      if (other.HasUptimeSeconds) {
        UptimeSeconds = other.UptimeSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BatteryLevel = input.ReadUInt32();
            break;
          }
          case 21: {
            Voltage = input.ReadFloat();
            break;
          }
          case 29: {
            ChannelUtilization = input.ReadFloat();
            break;
          }
          case 37: {
            AirUtilTx = input.ReadFloat();
            break;
          }
          case 40: {
            UptimeSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BatteryLevel = input.ReadUInt32();
            break;
          }
          case 21: {
            Voltage = input.ReadFloat();
            break;
          }
          case 29: {
            ChannelUtilization = input.ReadFloat();
            break;
          }
          case 37: {
            AirUtilTx = input.ReadFloat();
            break;
          }
          case 40: {
            UptimeSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Weather station or other environmental metrics
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EnvironmentMetrics : pb::IMessage<EnvironmentMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnvironmentMetrics> _parser = new pb::MessageParser<EnvironmentMetrics>(() => new EnvironmentMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EnvironmentMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnvironmentMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnvironmentMetrics(EnvironmentMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      temperature_ = other.temperature_;
      relativeHumidity_ = other.relativeHumidity_;
      barometricPressure_ = other.barometricPressure_;
      gasResistance_ = other.gasResistance_;
      voltage_ = other.voltage_;
      current_ = other.current_;
      iaq_ = other.iaq_;
      distance_ = other.distance_;
      lux_ = other.lux_;
      whiteLux_ = other.whiteLux_;
      irLux_ = other.irLux_;
      uvLux_ = other.uvLux_;
      windDirection_ = other.windDirection_;
      windSpeed_ = other.windSpeed_;
      weight_ = other.weight_;
      windGust_ = other.windGust_;
      windLull_ = other.windLull_;
      radiation_ = other.radiation_;
      rainfall1H_ = other.rainfall1H_;
      rainfall24H_ = other.rainfall24H_;
      soilMoisture_ = other.soilMoisture_;
      soilTemperature_ = other.soilTemperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnvironmentMetrics Clone() {
      return new EnvironmentMetrics(this);
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 1;
    private readonly static float TemperatureDefaultValue = 0F;

    private float temperature_;
    /// <summary>
    ///
    /// Temperature measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Temperature {
      get { if ((_hasBits0 & 1) != 0) { return temperature_; } else { return TemperatureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        temperature_ = value;
      }
    }
    /// <summary>Gets whether the "temperature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTemperature {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "temperature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTemperature() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "relative_humidity" field.</summary>
    public const int RelativeHumidityFieldNumber = 2;
    private readonly static float RelativeHumidityDefaultValue = 0F;

    private float relativeHumidity_;
    /// <summary>
    ///
    /// Relative humidity percent measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RelativeHumidity {
      get { if ((_hasBits0 & 2) != 0) { return relativeHumidity_; } else { return RelativeHumidityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        relativeHumidity_ = value;
      }
    }
    /// <summary>Gets whether the "relative_humidity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRelativeHumidity {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "relative_humidity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRelativeHumidity() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "barometric_pressure" field.</summary>
    public const int BarometricPressureFieldNumber = 3;
    private readonly static float BarometricPressureDefaultValue = 0F;

    private float barometricPressure_;
    /// <summary>
    ///
    /// Barometric pressure in hPA measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BarometricPressure {
      get { if ((_hasBits0 & 4) != 0) { return barometricPressure_; } else { return BarometricPressureDefaultValue; } }
      set {
        _hasBits0 |= 4;
        barometricPressure_ = value;
      }
    }
    /// <summary>Gets whether the "barometric_pressure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBarometricPressure {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "barometric_pressure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBarometricPressure() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gas_resistance" field.</summary>
    public const int GasResistanceFieldNumber = 4;
    private readonly static float GasResistanceDefaultValue = 0F;

    private float gasResistance_;
    /// <summary>
    ///
    /// Gas resistance in MOhm measured
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GasResistance {
      get { if ((_hasBits0 & 8) != 0) { return gasResistance_; } else { return GasResistanceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gasResistance_ = value;
      }
    }
    /// <summary>Gets whether the "gas_resistance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGasResistance {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gas_resistance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGasResistance() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 5;
    private readonly static float VoltageDefaultValue = 0F;

    private float voltage_;
    /// <summary>
    ///
    /// Voltage measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Voltage {
      get { if ((_hasBits0 & 16) != 0) { return voltage_; } else { return VoltageDefaultValue; } }
      set {
        _hasBits0 |= 16;
        voltage_ = value;
      }
    }
    /// <summary>Gets whether the "voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVoltage {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVoltage() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 6;
    private readonly static float CurrentDefaultValue = 0F;

    private float current_;
    /// <summary>
    ///
    /// Current measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Current {
      get { if ((_hasBits0 & 32) != 0) { return current_; } else { return CurrentDefaultValue; } }
      set {
        _hasBits0 |= 32;
        current_ = value;
      }
    }
    /// <summary>Gets whether the "current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrent {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrent() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "iaq" field.</summary>
    public const int IaqFieldNumber = 7;
    private readonly static uint IaqDefaultValue = 0;

    private uint iaq_;
    /// <summary>
    ///
    /// relative scale IAQ value as measured by Bosch BME680 . value 0-500.
    /// Belongs to Air Quality but is not particle but VOC measurement. Other VOC values can also be put in here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Iaq {
      get { if ((_hasBits0 & 64) != 0) { return iaq_; } else { return IaqDefaultValue; } }
      set {
        _hasBits0 |= 64;
        iaq_ = value;
      }
    }
    /// <summary>Gets whether the "iaq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIaq {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "iaq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIaq() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 8;
    private readonly static float DistanceDefaultValue = 0F;

    private float distance_;
    /// <summary>
    ///
    /// RCWL9620 Doppler Radar Distance Sensor, used for water level detection. Float value in mm.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Distance {
      get { if ((_hasBits0 & 128) != 0) { return distance_; } else { return DistanceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        distance_ = value;
      }
    }
    /// <summary>Gets whether the "distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDistance {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDistance() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "lux" field.</summary>
    public const int LuxFieldNumber = 9;
    private readonly static float LuxDefaultValue = 0F;

    private float lux_;
    /// <summary>
    ///
    /// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lux {
      get { if ((_hasBits0 & 256) != 0) { return lux_; } else { return LuxDefaultValue; } }
      set {
        _hasBits0 |= 256;
        lux_ = value;
      }
    }
    /// <summary>Gets whether the "lux" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLux {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "lux" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLux() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "white_lux" field.</summary>
    public const int WhiteLuxFieldNumber = 10;
    private readonly static float WhiteLuxDefaultValue = 0F;

    private float whiteLux_;
    /// <summary>
    ///
    /// VEML7700 high accuracy white light(irradiance) not calibrated digital 16-bit resolution sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WhiteLux {
      get { if ((_hasBits0 & 512) != 0) { return whiteLux_; } else { return WhiteLuxDefaultValue; } }
      set {
        _hasBits0 |= 512;
        whiteLux_ = value;
      }
    }
    /// <summary>Gets whether the "white_lux" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWhiteLux {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "white_lux" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWhiteLux() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ir_lux" field.</summary>
    public const int IrLuxFieldNumber = 11;
    private readonly static float IrLuxDefaultValue = 0F;

    private float irLux_;
    /// <summary>
    ///
    /// Infrared lux
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IrLux {
      get { if ((_hasBits0 & 1024) != 0) { return irLux_; } else { return IrLuxDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        irLux_ = value;
      }
    }
    /// <summary>Gets whether the "ir_lux" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIrLux {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ir_lux" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIrLux() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "uv_lux" field.</summary>
    public const int UvLuxFieldNumber = 12;
    private readonly static float UvLuxDefaultValue = 0F;

    private float uvLux_;
    /// <summary>
    ///
    /// Ultraviolet lux
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UvLux {
      get { if ((_hasBits0 & 2048) != 0) { return uvLux_; } else { return UvLuxDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        uvLux_ = value;
      }
    }
    /// <summary>Gets whether the "uv_lux" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUvLux {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "uv_lux" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUvLux() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "wind_direction" field.</summary>
    public const int WindDirectionFieldNumber = 13;
    private readonly static uint WindDirectionDefaultValue = 0;

    private uint windDirection_;
    /// <summary>
    ///
    /// Wind direction in degrees
    /// 0 degrees = North, 90 = East, etc...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WindDirection {
      get { if ((_hasBits0 & 4096) != 0) { return windDirection_; } else { return WindDirectionDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        windDirection_ = value;
      }
    }
    /// <summary>Gets whether the "wind_direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWindDirection {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "wind_direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWindDirection() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "wind_speed" field.</summary>
    public const int WindSpeedFieldNumber = 14;
    private readonly static float WindSpeedDefaultValue = 0F;

    private float windSpeed_;
    /// <summary>
    ///
    /// Wind speed in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WindSpeed {
      get { if ((_hasBits0 & 8192) != 0) { return windSpeed_; } else { return WindSpeedDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        windSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "wind_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWindSpeed {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "wind_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWindSpeed() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 15;
    private readonly static float WeightDefaultValue = 0F;

    private float weight_;
    /// <summary>
    ///
    /// Weight in KG
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Weight {
      get { if ((_hasBits0 & 16384) != 0) { return weight_; } else { return WeightDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        weight_ = value;
      }
    }
    /// <summary>Gets whether the "weight" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWeight {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "weight" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWeight() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "wind_gust" field.</summary>
    public const int WindGustFieldNumber = 16;
    private readonly static float WindGustDefaultValue = 0F;

    private float windGust_;
    /// <summary>
    ///
    /// Wind gust in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WindGust {
      get { if ((_hasBits0 & 32768) != 0) { return windGust_; } else { return WindGustDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        windGust_ = value;
      }
    }
    /// <summary>Gets whether the "wind_gust" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWindGust {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "wind_gust" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWindGust() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "wind_lull" field.</summary>
    public const int WindLullFieldNumber = 17;
    private readonly static float WindLullDefaultValue = 0F;

    private float windLull_;
    /// <summary>
    ///
    /// Wind lull in m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WindLull {
      get { if ((_hasBits0 & 65536) != 0) { return windLull_; } else { return WindLullDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        windLull_ = value;
      }
    }
    /// <summary>Gets whether the "wind_lull" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWindLull {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "wind_lull" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWindLull() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "radiation" field.</summary>
    public const int RadiationFieldNumber = 18;
    private readonly static float RadiationDefaultValue = 0F;

    private float radiation_;
    /// <summary>
    ///
    /// Radiation in µR/h
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Radiation {
      get { if ((_hasBits0 & 131072) != 0) { return radiation_; } else { return RadiationDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        radiation_ = value;
      }
    }
    /// <summary>Gets whether the "radiation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRadiation {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "radiation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRadiation() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "rainfall_1h" field.</summary>
    public const int Rainfall1HFieldNumber = 19;
    private readonly static float Rainfall1HDefaultValue = 0F;

    private float rainfall1H_;
    /// <summary>
    ///
    /// Rainfall in the last hour in mm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rainfall1H {
      get { if ((_hasBits0 & 262144) != 0) { return rainfall1H_; } else { return Rainfall1HDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        rainfall1H_ = value;
      }
    }
    /// <summary>Gets whether the "rainfall_1h" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRainfall1H {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "rainfall_1h" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRainfall1H() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "rainfall_24h" field.</summary>
    public const int Rainfall24HFieldNumber = 20;
    private readonly static float Rainfall24HDefaultValue = 0F;

    private float rainfall24H_;
    /// <summary>
    ///
    /// Rainfall in the last 24 hours in mm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rainfall24H {
      get { if ((_hasBits0 & 524288) != 0) { return rainfall24H_; } else { return Rainfall24HDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        rainfall24H_ = value;
      }
    }
    /// <summary>Gets whether the "rainfall_24h" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRainfall24H {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "rainfall_24h" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRainfall24H() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "soil_moisture" field.</summary>
    public const int SoilMoistureFieldNumber = 21;
    private readonly static uint SoilMoistureDefaultValue = 0;

    private uint soilMoisture_;
    /// <summary>
    ///
    /// Soil moisture measured (% 1-100)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SoilMoisture {
      get { if ((_hasBits0 & 1048576) != 0) { return soilMoisture_; } else { return SoilMoistureDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        soilMoisture_ = value;
      }
    }
    /// <summary>Gets whether the "soil_moisture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSoilMoisture {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "soil_moisture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSoilMoisture() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "soil_temperature" field.</summary>
    public const int SoilTemperatureFieldNumber = 22;
    private readonly static float SoilTemperatureDefaultValue = 0F;

    private float soilTemperature_;
    /// <summary>
    ///
    /// Soil temperature measured (*C)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SoilTemperature {
      get { if ((_hasBits0 & 2097152) != 0) { return soilTemperature_; } else { return SoilTemperatureDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        soilTemperature_ = value;
      }
    }
    /// <summary>Gets whether the "soil_temperature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSoilTemperature {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "soil_temperature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSoilTemperature() {
      _hasBits0 &= ~2097152;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EnvironmentMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EnvironmentMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RelativeHumidity, other.RelativeHumidity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BarometricPressure, other.BarometricPressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasResistance, other.GasResistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Current, other.Current)) return false;
      if (Iaq != other.Iaq) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lux, other.Lux)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WhiteLux, other.WhiteLux)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IrLux, other.IrLux)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UvLux, other.UvLux)) return false;
      if (WindDirection != other.WindDirection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindSpeed, other.WindSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Weight, other.Weight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindGust, other.WindGust)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindLull, other.WindLull)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radiation, other.Radiation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rainfall1H, other.Rainfall1H)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rainfall24H, other.Rainfall24H)) return false;
      if (SoilMoisture != other.SoilMoisture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SoilTemperature, other.SoilTemperature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTemperature) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
      if (HasRelativeHumidity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RelativeHumidity);
      if (HasBarometricPressure) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BarometricPressure);
      if (HasGasResistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasResistance);
      if (HasVoltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Voltage);
      if (HasCurrent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Current);
      if (HasIaq) hash ^= Iaq.GetHashCode();
      if (HasDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
      if (HasLux) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lux);
      if (HasWhiteLux) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WhiteLux);
      if (HasIrLux) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IrLux);
      if (HasUvLux) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UvLux);
      if (HasWindDirection) hash ^= WindDirection.GetHashCode();
      if (HasWindSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindSpeed);
      if (HasWeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Weight);
      if (HasWindGust) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindGust);
      if (HasWindLull) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindLull);
      if (HasRadiation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radiation);
      if (HasRainfall1H) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rainfall1H);
      if (HasRainfall24H) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rainfall24H);
      if (HasSoilMoisture) hash ^= SoilMoisture.GetHashCode();
      if (HasSoilTemperature) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SoilTemperature);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTemperature) {
        output.WriteRawTag(13);
        output.WriteFloat(Temperature);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(21);
        output.WriteFloat(RelativeHumidity);
      }
      if (HasBarometricPressure) {
        output.WriteRawTag(29);
        output.WriteFloat(BarometricPressure);
      }
      if (HasGasResistance) {
        output.WriteRawTag(37);
        output.WriteFloat(GasResistance);
      }
      if (HasVoltage) {
        output.WriteRawTag(45);
        output.WriteFloat(Voltage);
      }
      if (HasCurrent) {
        output.WriteRawTag(53);
        output.WriteFloat(Current);
      }
      if (HasIaq) {
        output.WriteRawTag(56);
        output.WriteUInt32(Iaq);
      }
      if (HasDistance) {
        output.WriteRawTag(69);
        output.WriteFloat(Distance);
      }
      if (HasLux) {
        output.WriteRawTag(77);
        output.WriteFloat(Lux);
      }
      if (HasWhiteLux) {
        output.WriteRawTag(85);
        output.WriteFloat(WhiteLux);
      }
      if (HasIrLux) {
        output.WriteRawTag(93);
        output.WriteFloat(IrLux);
      }
      if (HasUvLux) {
        output.WriteRawTag(101);
        output.WriteFloat(UvLux);
      }
      if (HasWindDirection) {
        output.WriteRawTag(104);
        output.WriteUInt32(WindDirection);
      }
      if (HasWindSpeed) {
        output.WriteRawTag(117);
        output.WriteFloat(WindSpeed);
      }
      if (HasWeight) {
        output.WriteRawTag(125);
        output.WriteFloat(Weight);
      }
      if (HasWindGust) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WindGust);
      }
      if (HasWindLull) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(WindLull);
      }
      if (HasRadiation) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Radiation);
      }
      if (HasRainfall1H) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Rainfall1H);
      }
      if (HasRainfall24H) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Rainfall24H);
      }
      if (HasSoilMoisture) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SoilMoisture);
      }
      if (HasSoilTemperature) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SoilTemperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTemperature) {
        output.WriteRawTag(13);
        output.WriteFloat(Temperature);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(21);
        output.WriteFloat(RelativeHumidity);
      }
      if (HasBarometricPressure) {
        output.WriteRawTag(29);
        output.WriteFloat(BarometricPressure);
      }
      if (HasGasResistance) {
        output.WriteRawTag(37);
        output.WriteFloat(GasResistance);
      }
      if (HasVoltage) {
        output.WriteRawTag(45);
        output.WriteFloat(Voltage);
      }
      if (HasCurrent) {
        output.WriteRawTag(53);
        output.WriteFloat(Current);
      }
      if (HasIaq) {
        output.WriteRawTag(56);
        output.WriteUInt32(Iaq);
      }
      if (HasDistance) {
        output.WriteRawTag(69);
        output.WriteFloat(Distance);
      }
      if (HasLux) {
        output.WriteRawTag(77);
        output.WriteFloat(Lux);
      }
      if (HasWhiteLux) {
        output.WriteRawTag(85);
        output.WriteFloat(WhiteLux);
      }
      if (HasIrLux) {
        output.WriteRawTag(93);
        output.WriteFloat(IrLux);
      }
      if (HasUvLux) {
        output.WriteRawTag(101);
        output.WriteFloat(UvLux);
      }
      if (HasWindDirection) {
        output.WriteRawTag(104);
        output.WriteUInt32(WindDirection);
      }
      if (HasWindSpeed) {
        output.WriteRawTag(117);
        output.WriteFloat(WindSpeed);
      }
      if (HasWeight) {
        output.WriteRawTag(125);
        output.WriteFloat(Weight);
      }
      if (HasWindGust) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WindGust);
      }
      if (HasWindLull) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(WindLull);
      }
      if (HasRadiation) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Radiation);
      }
      if (HasRainfall1H) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Rainfall1H);
      }
      if (HasRainfall24H) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Rainfall24H);
      }
      if (HasSoilMoisture) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SoilMoisture);
      }
      if (HasSoilTemperature) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SoilTemperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTemperature) {
        size += 1 + 4;
      }
      if (HasRelativeHumidity) {
        size += 1 + 4;
      }
      if (HasBarometricPressure) {
        size += 1 + 4;
      }
      if (HasGasResistance) {
        size += 1 + 4;
      }
      if (HasVoltage) {
        size += 1 + 4;
      }
      if (HasCurrent) {
        size += 1 + 4;
      }
      if (HasIaq) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Iaq);
      }
      if (HasDistance) {
        size += 1 + 4;
      }
      if (HasLux) {
        size += 1 + 4;
      }
      if (HasWhiteLux) {
        size += 1 + 4;
      }
      if (HasIrLux) {
        size += 1 + 4;
      }
      if (HasUvLux) {
        size += 1 + 4;
      }
      if (HasWindDirection) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WindDirection);
      }
      if (HasWindSpeed) {
        size += 1 + 4;
      }
      if (HasWeight) {
        size += 1 + 4;
      }
      if (HasWindGust) {
        size += 2 + 4;
      }
      if (HasWindLull) {
        size += 2 + 4;
      }
      if (HasRadiation) {
        size += 2 + 4;
      }
      if (HasRainfall1H) {
        size += 2 + 4;
      }
      if (HasRainfall24H) {
        size += 2 + 4;
      }
      if (HasSoilMoisture) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SoilMoisture);
      }
      if (HasSoilTemperature) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EnvironmentMetrics other) {
      if (other == null) {
        return;
      }
      if (other.HasTemperature) {
        Temperature = other.Temperature;
      }
      if (other.HasRelativeHumidity) {
        RelativeHumidity = other.RelativeHumidity;
      }
      if (other.HasBarometricPressure) {
        BarometricPressure = other.BarometricPressure;
      }
      if (other.HasGasResistance) {
        GasResistance = other.GasResistance;
      }
      if (other.HasVoltage) {
        Voltage = other.Voltage;
      }
      if (other.HasCurrent) {
        Current = other.Current;
      }
      if (other.HasIaq) {
        Iaq = other.Iaq;
      }
      if (other.HasDistance) {
        Distance = other.Distance;
      }
      if (other.HasLux) {
        Lux = other.Lux;
      }
      if (other.HasWhiteLux) {
        WhiteLux = other.WhiteLux;
      }
      if (other.HasIrLux) {
        IrLux = other.IrLux;
      }
      if (other.HasUvLux) {
        UvLux = other.UvLux;
      }
      if (other.HasWindDirection) {
        WindDirection = other.WindDirection;
      }
      if (other.HasWindSpeed) {
        WindSpeed = other.WindSpeed;
      }
      if (other.HasWeight) {
        Weight = other.Weight;
      }
      if (other.HasWindGust) {
        WindGust = other.WindGust;
      }
      if (other.HasWindLull) {
        WindLull = other.WindLull;
      }
      if (other.HasRadiation) {
        Radiation = other.Radiation;
      }
      if (other.HasRainfall1H) {
        Rainfall1H = other.Rainfall1H;
      }
      if (other.HasRainfall24H) {
        Rainfall24H = other.Rainfall24H;
      }
      if (other.HasSoilMoisture) {
        SoilMoisture = other.SoilMoisture;
      }
      if (other.HasSoilTemperature) {
        SoilTemperature = other.SoilTemperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Temperature = input.ReadFloat();
            break;
          }
          case 21: {
            RelativeHumidity = input.ReadFloat();
            break;
          }
          case 29: {
            BarometricPressure = input.ReadFloat();
            break;
          }
          case 37: {
            GasResistance = input.ReadFloat();
            break;
          }
          case 45: {
            Voltage = input.ReadFloat();
            break;
          }
          case 53: {
            Current = input.ReadFloat();
            break;
          }
          case 56: {
            Iaq = input.ReadUInt32();
            break;
          }
          case 69: {
            Distance = input.ReadFloat();
            break;
          }
          case 77: {
            Lux = input.ReadFloat();
            break;
          }
          case 85: {
            WhiteLux = input.ReadFloat();
            break;
          }
          case 93: {
            IrLux = input.ReadFloat();
            break;
          }
          case 101: {
            UvLux = input.ReadFloat();
            break;
          }
          case 104: {
            WindDirection = input.ReadUInt32();
            break;
          }
          case 117: {
            WindSpeed = input.ReadFloat();
            break;
          }
          case 125: {
            Weight = input.ReadFloat();
            break;
          }
          case 133: {
            WindGust = input.ReadFloat();
            break;
          }
          case 141: {
            WindLull = input.ReadFloat();
            break;
          }
          case 149: {
            Radiation = input.ReadFloat();
            break;
          }
          case 157: {
            Rainfall1H = input.ReadFloat();
            break;
          }
          case 165: {
            Rainfall24H = input.ReadFloat();
            break;
          }
          case 168: {
            SoilMoisture = input.ReadUInt32();
            break;
          }
          case 181: {
            SoilTemperature = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Temperature = input.ReadFloat();
            break;
          }
          case 21: {
            RelativeHumidity = input.ReadFloat();
            break;
          }
          case 29: {
            BarometricPressure = input.ReadFloat();
            break;
          }
          case 37: {
            GasResistance = input.ReadFloat();
            break;
          }
          case 45: {
            Voltage = input.ReadFloat();
            break;
          }
          case 53: {
            Current = input.ReadFloat();
            break;
          }
          case 56: {
            Iaq = input.ReadUInt32();
            break;
          }
          case 69: {
            Distance = input.ReadFloat();
            break;
          }
          case 77: {
            Lux = input.ReadFloat();
            break;
          }
          case 85: {
            WhiteLux = input.ReadFloat();
            break;
          }
          case 93: {
            IrLux = input.ReadFloat();
            break;
          }
          case 101: {
            UvLux = input.ReadFloat();
            break;
          }
          case 104: {
            WindDirection = input.ReadUInt32();
            break;
          }
          case 117: {
            WindSpeed = input.ReadFloat();
            break;
          }
          case 125: {
            Weight = input.ReadFloat();
            break;
          }
          case 133: {
            WindGust = input.ReadFloat();
            break;
          }
          case 141: {
            WindLull = input.ReadFloat();
            break;
          }
          case 149: {
            Radiation = input.ReadFloat();
            break;
          }
          case 157: {
            Rainfall1H = input.ReadFloat();
            break;
          }
          case 165: {
            Rainfall24H = input.ReadFloat();
            break;
          }
          case 168: {
            SoilMoisture = input.ReadUInt32();
            break;
          }
          case 181: {
            SoilTemperature = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Power Metrics (voltage / current / etc)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PowerMetrics : pb::IMessage<PowerMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PowerMetrics> _parser = new pb::MessageParser<PowerMetrics>(() => new PowerMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PowerMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerMetrics(PowerMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      ch1Voltage_ = other.ch1Voltage_;
      ch1Current_ = other.ch1Current_;
      ch2Voltage_ = other.ch2Voltage_;
      ch2Current_ = other.ch2Current_;
      ch3Voltage_ = other.ch3Voltage_;
      ch3Current_ = other.ch3Current_;
      ch4Voltage_ = other.ch4Voltage_;
      ch4Current_ = other.ch4Current_;
      ch5Voltage_ = other.ch5Voltage_;
      ch5Current_ = other.ch5Current_;
      ch6Voltage_ = other.ch6Voltage_;
      ch6Current_ = other.ch6Current_;
      ch7Voltage_ = other.ch7Voltage_;
      ch7Current_ = other.ch7Current_;
      ch8Voltage_ = other.ch8Voltage_;
      ch8Current_ = other.ch8Current_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerMetrics Clone() {
      return new PowerMetrics(this);
    }

    /// <summary>Field number for the "ch1_voltage" field.</summary>
    public const int Ch1VoltageFieldNumber = 1;
    private readonly static float Ch1VoltageDefaultValue = 0F;

    private float ch1Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch1Voltage {
      get { if ((_hasBits0 & 1) != 0) { return ch1Voltage_; } else { return Ch1VoltageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ch1Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch1_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh1Voltage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ch1_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh1Voltage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ch1_current" field.</summary>
    public const int Ch1CurrentFieldNumber = 2;
    private readonly static float Ch1CurrentDefaultValue = 0F;

    private float ch1Current_;
    /// <summary>
    ///
    /// Current (Ch1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch1Current {
      get { if ((_hasBits0 & 2) != 0) { return ch1Current_; } else { return Ch1CurrentDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ch1Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch1_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh1Current {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ch1_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh1Current() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ch2_voltage" field.</summary>
    public const int Ch2VoltageFieldNumber = 3;
    private readonly static float Ch2VoltageDefaultValue = 0F;

    private float ch2Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch2Voltage {
      get { if ((_hasBits0 & 4) != 0) { return ch2Voltage_; } else { return Ch2VoltageDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ch2Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch2_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh2Voltage {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ch2_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh2Voltage() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ch2_current" field.</summary>
    public const int Ch2CurrentFieldNumber = 4;
    private readonly static float Ch2CurrentDefaultValue = 0F;

    private float ch2Current_;
    /// <summary>
    ///
    /// Current (Ch2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch2Current {
      get { if ((_hasBits0 & 8) != 0) { return ch2Current_; } else { return Ch2CurrentDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ch2Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch2_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh2Current {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ch2_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh2Current() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ch3_voltage" field.</summary>
    public const int Ch3VoltageFieldNumber = 5;
    private readonly static float Ch3VoltageDefaultValue = 0F;

    private float ch3Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch3Voltage {
      get { if ((_hasBits0 & 16) != 0) { return ch3Voltage_; } else { return Ch3VoltageDefaultValue; } }
      set {
        _hasBits0 |= 16;
        ch3Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch3_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh3Voltage {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ch3_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh3Voltage() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ch3_current" field.</summary>
    public const int Ch3CurrentFieldNumber = 6;
    private readonly static float Ch3CurrentDefaultValue = 0F;

    private float ch3Current_;
    /// <summary>
    ///
    /// Current (Ch3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch3Current {
      get { if ((_hasBits0 & 32) != 0) { return ch3Current_; } else { return Ch3CurrentDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ch3Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch3_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh3Current {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ch3_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh3Current() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ch4_voltage" field.</summary>
    public const int Ch4VoltageFieldNumber = 7;
    private readonly static float Ch4VoltageDefaultValue = 0F;

    private float ch4Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch4Voltage {
      get { if ((_hasBits0 & 64) != 0) { return ch4Voltage_; } else { return Ch4VoltageDefaultValue; } }
      set {
        _hasBits0 |= 64;
        ch4Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch4_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh4Voltage {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ch4_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh4Voltage() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ch4_current" field.</summary>
    public const int Ch4CurrentFieldNumber = 8;
    private readonly static float Ch4CurrentDefaultValue = 0F;

    private float ch4Current_;
    /// <summary>
    ///
    /// Current (Ch4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch4Current {
      get { if ((_hasBits0 & 128) != 0) { return ch4Current_; } else { return Ch4CurrentDefaultValue; } }
      set {
        _hasBits0 |= 128;
        ch4Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch4_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh4Current {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "ch4_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh4Current() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "ch5_voltage" field.</summary>
    public const int Ch5VoltageFieldNumber = 9;
    private readonly static float Ch5VoltageDefaultValue = 0F;

    private float ch5Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch5Voltage {
      get { if ((_hasBits0 & 256) != 0) { return ch5Voltage_; } else { return Ch5VoltageDefaultValue; } }
      set {
        _hasBits0 |= 256;
        ch5Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch5_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh5Voltage {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "ch5_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh5Voltage() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "ch5_current" field.</summary>
    public const int Ch5CurrentFieldNumber = 10;
    private readonly static float Ch5CurrentDefaultValue = 0F;

    private float ch5Current_;
    /// <summary>
    ///
    /// Current (Ch5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch5Current {
      get { if ((_hasBits0 & 512) != 0) { return ch5Current_; } else { return Ch5CurrentDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ch5Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch5_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh5Current {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ch5_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh5Current() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ch6_voltage" field.</summary>
    public const int Ch6VoltageFieldNumber = 11;
    private readonly static float Ch6VoltageDefaultValue = 0F;

    private float ch6Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch6)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch6Voltage {
      get { if ((_hasBits0 & 1024) != 0) { return ch6Voltage_; } else { return Ch6VoltageDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ch6Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch6_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh6Voltage {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ch6_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh6Voltage() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ch6_current" field.</summary>
    public const int Ch6CurrentFieldNumber = 12;
    private readonly static float Ch6CurrentDefaultValue = 0F;

    private float ch6Current_;
    /// <summary>
    ///
    /// Current (Ch6)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch6Current {
      get { if ((_hasBits0 & 2048) != 0) { return ch6Current_; } else { return Ch6CurrentDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        ch6Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch6_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh6Current {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ch6_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh6Current() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "ch7_voltage" field.</summary>
    public const int Ch7VoltageFieldNumber = 13;
    private readonly static float Ch7VoltageDefaultValue = 0F;

    private float ch7Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch7)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch7Voltage {
      get { if ((_hasBits0 & 4096) != 0) { return ch7Voltage_; } else { return Ch7VoltageDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        ch7Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch7_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh7Voltage {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "ch7_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh7Voltage() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ch7_current" field.</summary>
    public const int Ch7CurrentFieldNumber = 14;
    private readonly static float Ch7CurrentDefaultValue = 0F;

    private float ch7Current_;
    /// <summary>
    ///
    /// Current (Ch7)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch7Current {
      get { if ((_hasBits0 & 8192) != 0) { return ch7Current_; } else { return Ch7CurrentDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        ch7Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch7_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh7Current {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "ch7_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh7Current() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "ch8_voltage" field.</summary>
    public const int Ch8VoltageFieldNumber = 15;
    private readonly static float Ch8VoltageDefaultValue = 0F;

    private float ch8Voltage_;
    /// <summary>
    ///
    /// Voltage (Ch8)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch8Voltage {
      get { if ((_hasBits0 & 16384) != 0) { return ch8Voltage_; } else { return Ch8VoltageDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        ch8Voltage_ = value;
      }
    }
    /// <summary>Gets whether the "ch8_voltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh8Voltage {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "ch8_voltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh8Voltage() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "ch8_current" field.</summary>
    public const int Ch8CurrentFieldNumber = 16;
    private readonly static float Ch8CurrentDefaultValue = 0F;

    private float ch8Current_;
    /// <summary>
    ///
    /// Current (Ch8)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ch8Current {
      get { if ((_hasBits0 & 32768) != 0) { return ch8Current_; } else { return Ch8CurrentDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        ch8Current_ = value;
      }
    }
    /// <summary>Gets whether the "ch8_current" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCh8Current {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "ch8_current" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCh8Current() {
      _hasBits0 &= ~32768;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PowerMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PowerMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch1Voltage, other.Ch1Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch1Current, other.Ch1Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch2Voltage, other.Ch2Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch2Current, other.Ch2Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch3Voltage, other.Ch3Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch3Current, other.Ch3Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch4Voltage, other.Ch4Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch4Current, other.Ch4Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch5Voltage, other.Ch5Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch5Current, other.Ch5Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch6Voltage, other.Ch6Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch6Current, other.Ch6Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch7Voltage, other.Ch7Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch7Current, other.Ch7Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch8Voltage, other.Ch8Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ch8Current, other.Ch8Current)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCh1Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch1Voltage);
      if (HasCh1Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch1Current);
      if (HasCh2Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch2Voltage);
      if (HasCh2Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch2Current);
      if (HasCh3Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch3Voltage);
      if (HasCh3Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch3Current);
      if (HasCh4Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch4Voltage);
      if (HasCh4Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch4Current);
      if (HasCh5Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch5Voltage);
      if (HasCh5Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch5Current);
      if (HasCh6Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch6Voltage);
      if (HasCh6Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch6Current);
      if (HasCh7Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch7Voltage);
      if (HasCh7Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch7Current);
      if (HasCh8Voltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch8Voltage);
      if (HasCh8Current) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ch8Current);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCh1Voltage) {
        output.WriteRawTag(13);
        output.WriteFloat(Ch1Voltage);
      }
      if (HasCh1Current) {
        output.WriteRawTag(21);
        output.WriteFloat(Ch1Current);
      }
      if (HasCh2Voltage) {
        output.WriteRawTag(29);
        output.WriteFloat(Ch2Voltage);
      }
      if (HasCh2Current) {
        output.WriteRawTag(37);
        output.WriteFloat(Ch2Current);
      }
      if (HasCh3Voltage) {
        output.WriteRawTag(45);
        output.WriteFloat(Ch3Voltage);
      }
      if (HasCh3Current) {
        output.WriteRawTag(53);
        output.WriteFloat(Ch3Current);
      }
      if (HasCh4Voltage) {
        output.WriteRawTag(61);
        output.WriteFloat(Ch4Voltage);
      }
      if (HasCh4Current) {
        output.WriteRawTag(69);
        output.WriteFloat(Ch4Current);
      }
      if (HasCh5Voltage) {
        output.WriteRawTag(77);
        output.WriteFloat(Ch5Voltage);
      }
      if (HasCh5Current) {
        output.WriteRawTag(85);
        output.WriteFloat(Ch5Current);
      }
      if (HasCh6Voltage) {
        output.WriteRawTag(93);
        output.WriteFloat(Ch6Voltage);
      }
      if (HasCh6Current) {
        output.WriteRawTag(101);
        output.WriteFloat(Ch6Current);
      }
      if (HasCh7Voltage) {
        output.WriteRawTag(109);
        output.WriteFloat(Ch7Voltage);
      }
      if (HasCh7Current) {
        output.WriteRawTag(117);
        output.WriteFloat(Ch7Current);
      }
      if (HasCh8Voltage) {
        output.WriteRawTag(125);
        output.WriteFloat(Ch8Voltage);
      }
      if (HasCh8Current) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Ch8Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCh1Voltage) {
        output.WriteRawTag(13);
        output.WriteFloat(Ch1Voltage);
      }
      if (HasCh1Current) {
        output.WriteRawTag(21);
        output.WriteFloat(Ch1Current);
      }
      if (HasCh2Voltage) {
        output.WriteRawTag(29);
        output.WriteFloat(Ch2Voltage);
      }
      if (HasCh2Current) {
        output.WriteRawTag(37);
        output.WriteFloat(Ch2Current);
      }
      if (HasCh3Voltage) {
        output.WriteRawTag(45);
        output.WriteFloat(Ch3Voltage);
      }
      if (HasCh3Current) {
        output.WriteRawTag(53);
        output.WriteFloat(Ch3Current);
      }
      if (HasCh4Voltage) {
        output.WriteRawTag(61);
        output.WriteFloat(Ch4Voltage);
      }
      if (HasCh4Current) {
        output.WriteRawTag(69);
        output.WriteFloat(Ch4Current);
      }
      if (HasCh5Voltage) {
        output.WriteRawTag(77);
        output.WriteFloat(Ch5Voltage);
      }
      if (HasCh5Current) {
        output.WriteRawTag(85);
        output.WriteFloat(Ch5Current);
      }
      if (HasCh6Voltage) {
        output.WriteRawTag(93);
        output.WriteFloat(Ch6Voltage);
      }
      if (HasCh6Current) {
        output.WriteRawTag(101);
        output.WriteFloat(Ch6Current);
      }
      if (HasCh7Voltage) {
        output.WriteRawTag(109);
        output.WriteFloat(Ch7Voltage);
      }
      if (HasCh7Current) {
        output.WriteRawTag(117);
        output.WriteFloat(Ch7Current);
      }
      if (HasCh8Voltage) {
        output.WriteRawTag(125);
        output.WriteFloat(Ch8Voltage);
      }
      if (HasCh8Current) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Ch8Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCh1Voltage) {
        size += 1 + 4;
      }
      if (HasCh1Current) {
        size += 1 + 4;
      }
      if (HasCh2Voltage) {
        size += 1 + 4;
      }
      if (HasCh2Current) {
        size += 1 + 4;
      }
      if (HasCh3Voltage) {
        size += 1 + 4;
      }
      if (HasCh3Current) {
        size += 1 + 4;
      }
      if (HasCh4Voltage) {
        size += 1 + 4;
      }
      if (HasCh4Current) {
        size += 1 + 4;
      }
      if (HasCh5Voltage) {
        size += 1 + 4;
      }
      if (HasCh5Current) {
        size += 1 + 4;
      }
      if (HasCh6Voltage) {
        size += 1 + 4;
      }
      if (HasCh6Current) {
        size += 1 + 4;
      }
      if (HasCh7Voltage) {
        size += 1 + 4;
      }
      if (HasCh7Current) {
        size += 1 + 4;
      }
      if (HasCh8Voltage) {
        size += 1 + 4;
      }
      if (HasCh8Current) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PowerMetrics other) {
      if (other == null) {
        return;
      }
      if (other.HasCh1Voltage) {
        Ch1Voltage = other.Ch1Voltage;
      }
      if (other.HasCh1Current) {
        Ch1Current = other.Ch1Current;
      }
      if (other.HasCh2Voltage) {
        Ch2Voltage = other.Ch2Voltage;
      }
      if (other.HasCh2Current) {
        Ch2Current = other.Ch2Current;
      }
      if (other.HasCh3Voltage) {
        Ch3Voltage = other.Ch3Voltage;
      }
      if (other.HasCh3Current) {
        Ch3Current = other.Ch3Current;
      }
      if (other.HasCh4Voltage) {
        Ch4Voltage = other.Ch4Voltage;
      }
      if (other.HasCh4Current) {
        Ch4Current = other.Ch4Current;
      }
      if (other.HasCh5Voltage) {
        Ch5Voltage = other.Ch5Voltage;
      }
      if (other.HasCh5Current) {
        Ch5Current = other.Ch5Current;
      }
      if (other.HasCh6Voltage) {
        Ch6Voltage = other.Ch6Voltage;
      }
      if (other.HasCh6Current) {
        Ch6Current = other.Ch6Current;
      }
      if (other.HasCh7Voltage) {
        Ch7Voltage = other.Ch7Voltage;
      }
      if (other.HasCh7Current) {
        Ch7Current = other.Ch7Current;
      }
      if (other.HasCh8Voltage) {
        Ch8Voltage = other.Ch8Voltage;
      }
      if (other.HasCh8Current) {
        Ch8Current = other.Ch8Current;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Ch1Voltage = input.ReadFloat();
            break;
          }
          case 21: {
            Ch1Current = input.ReadFloat();
            break;
          }
          case 29: {
            Ch2Voltage = input.ReadFloat();
            break;
          }
          case 37: {
            Ch2Current = input.ReadFloat();
            break;
          }
          case 45: {
            Ch3Voltage = input.ReadFloat();
            break;
          }
          case 53: {
            Ch3Current = input.ReadFloat();
            break;
          }
          case 61: {
            Ch4Voltage = input.ReadFloat();
            break;
          }
          case 69: {
            Ch4Current = input.ReadFloat();
            break;
          }
          case 77: {
            Ch5Voltage = input.ReadFloat();
            break;
          }
          case 85: {
            Ch5Current = input.ReadFloat();
            break;
          }
          case 93: {
            Ch6Voltage = input.ReadFloat();
            break;
          }
          case 101: {
            Ch6Current = input.ReadFloat();
            break;
          }
          case 109: {
            Ch7Voltage = input.ReadFloat();
            break;
          }
          case 117: {
            Ch7Current = input.ReadFloat();
            break;
          }
          case 125: {
            Ch8Voltage = input.ReadFloat();
            break;
          }
          case 133: {
            Ch8Current = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Ch1Voltage = input.ReadFloat();
            break;
          }
          case 21: {
            Ch1Current = input.ReadFloat();
            break;
          }
          case 29: {
            Ch2Voltage = input.ReadFloat();
            break;
          }
          case 37: {
            Ch2Current = input.ReadFloat();
            break;
          }
          case 45: {
            Ch3Voltage = input.ReadFloat();
            break;
          }
          case 53: {
            Ch3Current = input.ReadFloat();
            break;
          }
          case 61: {
            Ch4Voltage = input.ReadFloat();
            break;
          }
          case 69: {
            Ch4Current = input.ReadFloat();
            break;
          }
          case 77: {
            Ch5Voltage = input.ReadFloat();
            break;
          }
          case 85: {
            Ch5Current = input.ReadFloat();
            break;
          }
          case 93: {
            Ch6Voltage = input.ReadFloat();
            break;
          }
          case 101: {
            Ch6Current = input.ReadFloat();
            break;
          }
          case 109: {
            Ch7Voltage = input.ReadFloat();
            break;
          }
          case 117: {
            Ch7Current = input.ReadFloat();
            break;
          }
          case 125: {
            Ch8Voltage = input.ReadFloat();
            break;
          }
          case 133: {
            Ch8Current = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Air quality metrics
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AirQualityMetrics : pb::IMessage<AirQualityMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AirQualityMetrics> _parser = new pb::MessageParser<AirQualityMetrics>(() => new AirQualityMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AirQualityMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AirQualityMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AirQualityMetrics(AirQualityMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      pm10Standard_ = other.pm10Standard_;
      pm25Standard_ = other.pm25Standard_;
      pm100Standard_ = other.pm100Standard_;
      pm10Environmental_ = other.pm10Environmental_;
      pm25Environmental_ = other.pm25Environmental_;
      pm100Environmental_ = other.pm100Environmental_;
      particles03Um_ = other.particles03Um_;
      particles05Um_ = other.particles05Um_;
      particles10Um_ = other.particles10Um_;
      particles25Um_ = other.particles25Um_;
      particles50Um_ = other.particles50Um_;
      particles100Um_ = other.particles100Um_;
      co2_ = other.co2_;
      co2Temperature_ = other.co2Temperature_;
      co2Humidity_ = other.co2Humidity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AirQualityMetrics Clone() {
      return new AirQualityMetrics(this);
    }

    /// <summary>Field number for the "pm10_standard" field.</summary>
    public const int Pm10StandardFieldNumber = 1;
    private readonly static uint Pm10StandardDefaultValue = 0;

    private uint pm10Standard_;
    /// <summary>
    ///
    /// Concentration Units Standard PM1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm10Standard {
      get { if ((_hasBits0 & 1) != 0) { return pm10Standard_; } else { return Pm10StandardDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pm10Standard_ = value;
      }
    }
    /// <summary>Gets whether the "pm10_standard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPm10Standard {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pm10_standard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPm10Standard() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pm25_standard" field.</summary>
    public const int Pm25StandardFieldNumber = 2;
    private readonly static uint Pm25StandardDefaultValue = 0;

    private uint pm25Standard_;
    /// <summary>
    ///
    /// Concentration Units Standard PM2.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm25Standard {
      get { if ((_hasBits0 & 2) != 0) { return pm25Standard_; } else { return Pm25StandardDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pm25Standard_ = value;
      }
    }
    /// <summary>Gets whether the "pm25_standard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPm25Standard {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pm25_standard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPm25Standard() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pm100_standard" field.</summary>
    public const int Pm100StandardFieldNumber = 3;
    private readonly static uint Pm100StandardDefaultValue = 0;

    private uint pm100Standard_;
    /// <summary>
    ///
    /// Concentration Units Standard PM10.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm100Standard {
      get { if ((_hasBits0 & 4) != 0) { return pm100Standard_; } else { return Pm100StandardDefaultValue; } }
      set {
        _hasBits0 |= 4;
        pm100Standard_ = value;
      }
    }
    /// <summary>Gets whether the "pm100_standard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPm100Standard {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pm100_standard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPm100Standard() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "pm10_environmental" field.</summary>
    public const int Pm10EnvironmentalFieldNumber = 4;
    private readonly static uint Pm10EnvironmentalDefaultValue = 0;

    private uint pm10Environmental_;
    /// <summary>
    ///
    /// Concentration Units Environmental PM1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm10Environmental {
      get { if ((_hasBits0 & 8) != 0) { return pm10Environmental_; } else { return Pm10EnvironmentalDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pm10Environmental_ = value;
      }
    }
    /// <summary>Gets whether the "pm10_environmental" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPm10Environmental {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pm10_environmental" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPm10Environmental() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pm25_environmental" field.</summary>
    public const int Pm25EnvironmentalFieldNumber = 5;
    private readonly static uint Pm25EnvironmentalDefaultValue = 0;

    private uint pm25Environmental_;
    /// <summary>
    ///
    /// Concentration Units Environmental PM2.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm25Environmental {
      get { if ((_hasBits0 & 16) != 0) { return pm25Environmental_; } else { return Pm25EnvironmentalDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pm25Environmental_ = value;
      }
    }
    /// <summary>Gets whether the "pm25_environmental" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPm25Environmental {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pm25_environmental" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPm25Environmental() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "pm100_environmental" field.</summary>
    public const int Pm100EnvironmentalFieldNumber = 6;
    private readonly static uint Pm100EnvironmentalDefaultValue = 0;

    private uint pm100Environmental_;
    /// <summary>
    ///
    /// Concentration Units Environmental PM10.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Pm100Environmental {
      get { if ((_hasBits0 & 32) != 0) { return pm100Environmental_; } else { return Pm100EnvironmentalDefaultValue; } }
      set {
        _hasBits0 |= 32;
        pm100Environmental_ = value;
      }
    }
    /// <summary>Gets whether the "pm100_environmental" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPm100Environmental {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "pm100_environmental" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPm100Environmental() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "particles_03um" field.</summary>
    public const int Particles03UmFieldNumber = 7;
    private readonly static uint Particles03UmDefaultValue = 0;

    private uint particles03Um_;
    /// <summary>
    ///
    /// 0.3um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles03Um {
      get { if ((_hasBits0 & 64) != 0) { return particles03Um_; } else { return Particles03UmDefaultValue; } }
      set {
        _hasBits0 |= 64;
        particles03Um_ = value;
      }
    }
    /// <summary>Gets whether the "particles_03um" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticles03Um {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "particles_03um" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticles03Um() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "particles_05um" field.</summary>
    public const int Particles05UmFieldNumber = 8;
    private readonly static uint Particles05UmDefaultValue = 0;

    private uint particles05Um_;
    /// <summary>
    ///
    /// 0.5um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles05Um {
      get { if ((_hasBits0 & 128) != 0) { return particles05Um_; } else { return Particles05UmDefaultValue; } }
      set {
        _hasBits0 |= 128;
        particles05Um_ = value;
      }
    }
    /// <summary>Gets whether the "particles_05um" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticles05Um {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "particles_05um" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticles05Um() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "particles_10um" field.</summary>
    public const int Particles10UmFieldNumber = 9;
    private readonly static uint Particles10UmDefaultValue = 0;

    private uint particles10Um_;
    /// <summary>
    ///
    /// 1.0um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles10Um {
      get { if ((_hasBits0 & 256) != 0) { return particles10Um_; } else { return Particles10UmDefaultValue; } }
      set {
        _hasBits0 |= 256;
        particles10Um_ = value;
      }
    }
    /// <summary>Gets whether the "particles_10um" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticles10Um {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "particles_10um" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticles10Um() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "particles_25um" field.</summary>
    public const int Particles25UmFieldNumber = 10;
    private readonly static uint Particles25UmDefaultValue = 0;

    private uint particles25Um_;
    /// <summary>
    ///
    /// 2.5um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles25Um {
      get { if ((_hasBits0 & 512) != 0) { return particles25Um_; } else { return Particles25UmDefaultValue; } }
      set {
        _hasBits0 |= 512;
        particles25Um_ = value;
      }
    }
    /// <summary>Gets whether the "particles_25um" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticles25Um {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "particles_25um" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticles25Um() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "particles_50um" field.</summary>
    public const int Particles50UmFieldNumber = 11;
    private readonly static uint Particles50UmDefaultValue = 0;

    private uint particles50Um_;
    /// <summary>
    ///
    /// 5.0um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles50Um {
      get { if ((_hasBits0 & 1024) != 0) { return particles50Um_; } else { return Particles50UmDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        particles50Um_ = value;
      }
    }
    /// <summary>Gets whether the "particles_50um" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticles50Um {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "particles_50um" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticles50Um() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "particles_100um" field.</summary>
    public const int Particles100UmFieldNumber = 12;
    private readonly static uint Particles100UmDefaultValue = 0;

    private uint particles100Um_;
    /// <summary>
    ///
    /// 10.0um Particle Count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Particles100Um {
      get { if ((_hasBits0 & 2048) != 0) { return particles100Um_; } else { return Particles100UmDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        particles100Um_ = value;
      }
    }
    /// <summary>Gets whether the "particles_100um" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticles100Um {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "particles_100um" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticles100Um() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "co2" field.</summary>
    public const int Co2FieldNumber = 13;
    private readonly static uint Co2DefaultValue = 0;

    private uint co2_;
    /// <summary>
    ///
    /// CO2 concentration in ppm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Co2 {
      get { if ((_hasBits0 & 4096) != 0) { return co2_; } else { return Co2DefaultValue; } }
      set {
        _hasBits0 |= 4096;
        co2_ = value;
      }
    }
    /// <summary>Gets whether the "co2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCo2 {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "co2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCo2() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "co2_temperature" field.</summary>
    public const int Co2TemperatureFieldNumber = 14;
    private readonly static float Co2TemperatureDefaultValue = 0F;

    private float co2Temperature_;
    /// <summary>
    ///
    /// CO2 sensor temperature in degC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Co2Temperature {
      get { if ((_hasBits0 & 8192) != 0) { return co2Temperature_; } else { return Co2TemperatureDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        co2Temperature_ = value;
      }
    }
    /// <summary>Gets whether the "co2_temperature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCo2Temperature {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "co2_temperature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCo2Temperature() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "co2_humidity" field.</summary>
    public const int Co2HumidityFieldNumber = 15;
    private readonly static float Co2HumidityDefaultValue = 0F;

    private float co2Humidity_;
    /// <summary>
    ///
    /// CO2 sensor relative humidity in %
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Co2Humidity {
      get { if ((_hasBits0 & 16384) != 0) { return co2Humidity_; } else { return Co2HumidityDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        co2Humidity_ = value;
      }
    }
    /// <summary>Gets whether the "co2_humidity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCo2Humidity {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "co2_humidity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCo2Humidity() {
      _hasBits0 &= ~16384;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AirQualityMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AirQualityMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pm10Standard != other.Pm10Standard) return false;
      if (Pm25Standard != other.Pm25Standard) return false;
      if (Pm100Standard != other.Pm100Standard) return false;
      if (Pm10Environmental != other.Pm10Environmental) return false;
      if (Pm25Environmental != other.Pm25Environmental) return false;
      if (Pm100Environmental != other.Pm100Environmental) return false;
      if (Particles03Um != other.Particles03Um) return false;
      if (Particles05Um != other.Particles05Um) return false;
      if (Particles10Um != other.Particles10Um) return false;
      if (Particles25Um != other.Particles25Um) return false;
      if (Particles50Um != other.Particles50Um) return false;
      if (Particles100Um != other.Particles100Um) return false;
      if (Co2 != other.Co2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Co2Temperature, other.Co2Temperature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Co2Humidity, other.Co2Humidity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPm10Standard) hash ^= Pm10Standard.GetHashCode();
      if (HasPm25Standard) hash ^= Pm25Standard.GetHashCode();
      if (HasPm100Standard) hash ^= Pm100Standard.GetHashCode();
      if (HasPm10Environmental) hash ^= Pm10Environmental.GetHashCode();
      if (HasPm25Environmental) hash ^= Pm25Environmental.GetHashCode();
      if (HasPm100Environmental) hash ^= Pm100Environmental.GetHashCode();
      if (HasParticles03Um) hash ^= Particles03Um.GetHashCode();
      if (HasParticles05Um) hash ^= Particles05Um.GetHashCode();
      if (HasParticles10Um) hash ^= Particles10Um.GetHashCode();
      if (HasParticles25Um) hash ^= Particles25Um.GetHashCode();
      if (HasParticles50Um) hash ^= Particles50Um.GetHashCode();
      if (HasParticles100Um) hash ^= Particles100Um.GetHashCode();
      if (HasCo2) hash ^= Co2.GetHashCode();
      if (HasCo2Temperature) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Co2Temperature);
      if (HasCo2Humidity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Co2Humidity);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPm10Standard) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pm10Standard);
      }
      if (HasPm25Standard) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pm25Standard);
      }
      if (HasPm100Standard) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pm100Standard);
      }
      if (HasPm10Environmental) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pm10Environmental);
      }
      if (HasPm25Environmental) {
        output.WriteRawTag(40);
        output.WriteUInt32(Pm25Environmental);
      }
      if (HasPm100Environmental) {
        output.WriteRawTag(48);
        output.WriteUInt32(Pm100Environmental);
      }
      if (HasParticles03Um) {
        output.WriteRawTag(56);
        output.WriteUInt32(Particles03Um);
      }
      if (HasParticles05Um) {
        output.WriteRawTag(64);
        output.WriteUInt32(Particles05Um);
      }
      if (HasParticles10Um) {
        output.WriteRawTag(72);
        output.WriteUInt32(Particles10Um);
      }
      if (HasParticles25Um) {
        output.WriteRawTag(80);
        output.WriteUInt32(Particles25Um);
      }
      if (HasParticles50Um) {
        output.WriteRawTag(88);
        output.WriteUInt32(Particles50Um);
      }
      if (HasParticles100Um) {
        output.WriteRawTag(96);
        output.WriteUInt32(Particles100Um);
      }
      if (HasCo2) {
        output.WriteRawTag(104);
        output.WriteUInt32(Co2);
      }
      if (HasCo2Temperature) {
        output.WriteRawTag(117);
        output.WriteFloat(Co2Temperature);
      }
      if (HasCo2Humidity) {
        output.WriteRawTag(125);
        output.WriteFloat(Co2Humidity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPm10Standard) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pm10Standard);
      }
      if (HasPm25Standard) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pm25Standard);
      }
      if (HasPm100Standard) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pm100Standard);
      }
      if (HasPm10Environmental) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pm10Environmental);
      }
      if (HasPm25Environmental) {
        output.WriteRawTag(40);
        output.WriteUInt32(Pm25Environmental);
      }
      if (HasPm100Environmental) {
        output.WriteRawTag(48);
        output.WriteUInt32(Pm100Environmental);
      }
      if (HasParticles03Um) {
        output.WriteRawTag(56);
        output.WriteUInt32(Particles03Um);
      }
      if (HasParticles05Um) {
        output.WriteRawTag(64);
        output.WriteUInt32(Particles05Um);
      }
      if (HasParticles10Um) {
        output.WriteRawTag(72);
        output.WriteUInt32(Particles10Um);
      }
      if (HasParticles25Um) {
        output.WriteRawTag(80);
        output.WriteUInt32(Particles25Um);
      }
      if (HasParticles50Um) {
        output.WriteRawTag(88);
        output.WriteUInt32(Particles50Um);
      }
      if (HasParticles100Um) {
        output.WriteRawTag(96);
        output.WriteUInt32(Particles100Um);
      }
      if (HasCo2) {
        output.WriteRawTag(104);
        output.WriteUInt32(Co2);
      }
      if (HasCo2Temperature) {
        output.WriteRawTag(117);
        output.WriteFloat(Co2Temperature);
      }
      if (HasCo2Humidity) {
        output.WriteRawTag(125);
        output.WriteFloat(Co2Humidity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPm10Standard) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm10Standard);
      }
      if (HasPm25Standard) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm25Standard);
      }
      if (HasPm100Standard) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm100Standard);
      }
      if (HasPm10Environmental) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm10Environmental);
      }
      if (HasPm25Environmental) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm25Environmental);
      }
      if (HasPm100Environmental) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pm100Environmental);
      }
      if (HasParticles03Um) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles03Um);
      }
      if (HasParticles05Um) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles05Um);
      }
      if (HasParticles10Um) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles10Um);
      }
      if (HasParticles25Um) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles25Um);
      }
      if (HasParticles50Um) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles50Um);
      }
      if (HasParticles100Um) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Particles100Um);
      }
      if (HasCo2) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Co2);
      }
      if (HasCo2Temperature) {
        size += 1 + 4;
      }
      if (HasCo2Humidity) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AirQualityMetrics other) {
      if (other == null) {
        return;
      }
      if (other.HasPm10Standard) {
        Pm10Standard = other.Pm10Standard;
      }
      if (other.HasPm25Standard) {
        Pm25Standard = other.Pm25Standard;
      }
      if (other.HasPm100Standard) {
        Pm100Standard = other.Pm100Standard;
      }
      if (other.HasPm10Environmental) {
        Pm10Environmental = other.Pm10Environmental;
      }
      if (other.HasPm25Environmental) {
        Pm25Environmental = other.Pm25Environmental;
      }
      if (other.HasPm100Environmental) {
        Pm100Environmental = other.Pm100Environmental;
      }
      if (other.HasParticles03Um) {
        Particles03Um = other.Particles03Um;
      }
      if (other.HasParticles05Um) {
        Particles05Um = other.Particles05Um;
      }
      if (other.HasParticles10Um) {
        Particles10Um = other.Particles10Um;
      }
      if (other.HasParticles25Um) {
        Particles25Um = other.Particles25Um;
      }
      if (other.HasParticles50Um) {
        Particles50Um = other.Particles50Um;
      }
      if (other.HasParticles100Um) {
        Particles100Um = other.Particles100Um;
      }
      if (other.HasCo2) {
        Co2 = other.Co2;
      }
      if (other.HasCo2Temperature) {
        Co2Temperature = other.Co2Temperature;
      }
      if (other.HasCo2Humidity) {
        Co2Humidity = other.Co2Humidity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pm10Standard = input.ReadUInt32();
            break;
          }
          case 16: {
            Pm25Standard = input.ReadUInt32();
            break;
          }
          case 24: {
            Pm100Standard = input.ReadUInt32();
            break;
          }
          case 32: {
            Pm10Environmental = input.ReadUInt32();
            break;
          }
          case 40: {
            Pm25Environmental = input.ReadUInt32();
            break;
          }
          case 48: {
            Pm100Environmental = input.ReadUInt32();
            break;
          }
          case 56: {
            Particles03Um = input.ReadUInt32();
            break;
          }
          case 64: {
            Particles05Um = input.ReadUInt32();
            break;
          }
          case 72: {
            Particles10Um = input.ReadUInt32();
            break;
          }
          case 80: {
            Particles25Um = input.ReadUInt32();
            break;
          }
          case 88: {
            Particles50Um = input.ReadUInt32();
            break;
          }
          case 96: {
            Particles100Um = input.ReadUInt32();
            break;
          }
          case 104: {
            Co2 = input.ReadUInt32();
            break;
          }
          case 117: {
            Co2Temperature = input.ReadFloat();
            break;
          }
          case 125: {
            Co2Humidity = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pm10Standard = input.ReadUInt32();
            break;
          }
          case 16: {
            Pm25Standard = input.ReadUInt32();
            break;
          }
          case 24: {
            Pm100Standard = input.ReadUInt32();
            break;
          }
          case 32: {
            Pm10Environmental = input.ReadUInt32();
            break;
          }
          case 40: {
            Pm25Environmental = input.ReadUInt32();
            break;
          }
          case 48: {
            Pm100Environmental = input.ReadUInt32();
            break;
          }
          case 56: {
            Particles03Um = input.ReadUInt32();
            break;
          }
          case 64: {
            Particles05Um = input.ReadUInt32();
            break;
          }
          case 72: {
            Particles10Um = input.ReadUInt32();
            break;
          }
          case 80: {
            Particles25Um = input.ReadUInt32();
            break;
          }
          case 88: {
            Particles50Um = input.ReadUInt32();
            break;
          }
          case 96: {
            Particles100Um = input.ReadUInt32();
            break;
          }
          case 104: {
            Co2 = input.ReadUInt32();
            break;
          }
          case 117: {
            Co2Temperature = input.ReadFloat();
            break;
          }
          case 125: {
            Co2Humidity = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Local device mesh statistics
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LocalStats : pb::IMessage<LocalStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LocalStats> _parser = new pb::MessageParser<LocalStats>(() => new LocalStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LocalStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalStats(LocalStats other) : this() {
      uptimeSeconds_ = other.uptimeSeconds_;
      channelUtilization_ = other.channelUtilization_;
      airUtilTx_ = other.airUtilTx_;
      numPacketsTx_ = other.numPacketsTx_;
      numPacketsRx_ = other.numPacketsRx_;
      numPacketsRxBad_ = other.numPacketsRxBad_;
      numOnlineNodes_ = other.numOnlineNodes_;
      numTotalNodes_ = other.numTotalNodes_;
      numRxDupe_ = other.numRxDupe_;
      numTxRelay_ = other.numTxRelay_;
      numTxRelayCanceled_ = other.numTxRelayCanceled_;
      heapTotalBytes_ = other.heapTotalBytes_;
      heapFreeBytes_ = other.heapFreeBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalStats Clone() {
      return new LocalStats(this);
    }

    /// <summary>Field number for the "uptime_seconds" field.</summary>
    public const int UptimeSecondsFieldNumber = 1;
    private uint uptimeSeconds_;
    /// <summary>
    ///
    /// How long the device has been running since the last reboot (in seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UptimeSeconds {
      get { return uptimeSeconds_; }
      set {
        uptimeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "channel_utilization" field.</summary>
    public const int ChannelUtilizationFieldNumber = 2;
    private float channelUtilization_;
    /// <summary>
    ///
    /// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChannelUtilization {
      get { return channelUtilization_; }
      set {
        channelUtilization_ = value;
      }
    }

    /// <summary>Field number for the "air_util_tx" field.</summary>
    public const int AirUtilTxFieldNumber = 3;
    private float airUtilTx_;
    /// <summary>
    ///
    /// Percent of airtime for transmission used within the last hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirUtilTx {
      get { return airUtilTx_; }
      set {
        airUtilTx_ = value;
      }
    }

    /// <summary>Field number for the "num_packets_tx" field.</summary>
    public const int NumPacketsTxFieldNumber = 4;
    private uint numPacketsTx_;
    /// <summary>
    ///
    /// Number of packets sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumPacketsTx {
      get { return numPacketsTx_; }
      set {
        numPacketsTx_ = value;
      }
    }

    /// <summary>Field number for the "num_packets_rx" field.</summary>
    public const int NumPacketsRxFieldNumber = 5;
    private uint numPacketsRx_;
    /// <summary>
    ///
    /// Number of packets received (both good and bad)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumPacketsRx {
      get { return numPacketsRx_; }
      set {
        numPacketsRx_ = value;
      }
    }

    /// <summary>Field number for the "num_packets_rx_bad" field.</summary>
    public const int NumPacketsRxBadFieldNumber = 6;
    private uint numPacketsRxBad_;
    /// <summary>
    ///
    /// Number of packets received that are malformed or violate the protocol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumPacketsRxBad {
      get { return numPacketsRxBad_; }
      set {
        numPacketsRxBad_ = value;
      }
    }

    /// <summary>Field number for the "num_online_nodes" field.</summary>
    public const int NumOnlineNodesFieldNumber = 7;
    private uint numOnlineNodes_;
    /// <summary>
    ///
    /// Number of nodes online (in the past 2 hours)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumOnlineNodes {
      get { return numOnlineNodes_; }
      set {
        numOnlineNodes_ = value;
      }
    }

    /// <summary>Field number for the "num_total_nodes" field.</summary>
    public const int NumTotalNodesFieldNumber = 8;
    private uint numTotalNodes_;
    /// <summary>
    ///
    /// Number of nodes total
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumTotalNodes {
      get { return numTotalNodes_; }
      set {
        numTotalNodes_ = value;
      }
    }

    /// <summary>Field number for the "num_rx_dupe" field.</summary>
    public const int NumRxDupeFieldNumber = 9;
    private uint numRxDupe_;
    /// <summary>
    ///
    /// Number of received packets that were duplicates (due to multiple nodes relaying).
    /// If this number is high, there are nodes in the mesh relaying packets when it's unnecessary, for example due to the ROUTER/REPEATER role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumRxDupe {
      get { return numRxDupe_; }
      set {
        numRxDupe_ = value;
      }
    }

    /// <summary>Field number for the "num_tx_relay" field.</summary>
    public const int NumTxRelayFieldNumber = 10;
    private uint numTxRelay_;
    /// <summary>
    ///
    /// Number of packets we transmitted that were a relay for others (not originating from ourselves).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumTxRelay {
      get { return numTxRelay_; }
      set {
        numTxRelay_ = value;
      }
    }

    /// <summary>Field number for the "num_tx_relay_canceled" field.</summary>
    public const int NumTxRelayCanceledFieldNumber = 11;
    private uint numTxRelayCanceled_;
    /// <summary>
    ///
    /// Number of times we canceled a packet to be relayed, because someone else did it before us.
    /// This will always be zero for ROUTERs/REPEATERs. If this number is high, some other node(s) is/are relaying faster than you.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumTxRelayCanceled {
      get { return numTxRelayCanceled_; }
      set {
        numTxRelayCanceled_ = value;
      }
    }

    /// <summary>Field number for the "heap_total_bytes" field.</summary>
    public const int HeapTotalBytesFieldNumber = 12;
    private uint heapTotalBytes_;
    /// <summary>
    ///
    /// Number of bytes used in the heap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HeapTotalBytes {
      get { return heapTotalBytes_; }
      set {
        heapTotalBytes_ = value;
      }
    }

    /// <summary>Field number for the "heap_free_bytes" field.</summary>
    public const int HeapFreeBytesFieldNumber = 13;
    private uint heapFreeBytes_;
    /// <summary>
    ///
    /// Number of bytes free in the heap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HeapFreeBytes {
      get { return heapFreeBytes_; }
      set {
        heapFreeBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LocalStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LocalStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UptimeSeconds != other.UptimeSeconds) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChannelUtilization, other.ChannelUtilization)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirUtilTx, other.AirUtilTx)) return false;
      if (NumPacketsTx != other.NumPacketsTx) return false;
      if (NumPacketsRx != other.NumPacketsRx) return false;
      if (NumPacketsRxBad != other.NumPacketsRxBad) return false;
      if (NumOnlineNodes != other.NumOnlineNodes) return false;
      if (NumTotalNodes != other.NumTotalNodes) return false;
      if (NumRxDupe != other.NumRxDupe) return false;
      if (NumTxRelay != other.NumTxRelay) return false;
      if (NumTxRelayCanceled != other.NumTxRelayCanceled) return false;
      if (HeapTotalBytes != other.HeapTotalBytes) return false;
      if (HeapFreeBytes != other.HeapFreeBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UptimeSeconds != 0) hash ^= UptimeSeconds.GetHashCode();
      if (ChannelUtilization != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChannelUtilization);
      if (AirUtilTx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirUtilTx);
      if (NumPacketsTx != 0) hash ^= NumPacketsTx.GetHashCode();
      if (NumPacketsRx != 0) hash ^= NumPacketsRx.GetHashCode();
      if (NumPacketsRxBad != 0) hash ^= NumPacketsRxBad.GetHashCode();
      if (NumOnlineNodes != 0) hash ^= NumOnlineNodes.GetHashCode();
      if (NumTotalNodes != 0) hash ^= NumTotalNodes.GetHashCode();
      if (NumRxDupe != 0) hash ^= NumRxDupe.GetHashCode();
      if (NumTxRelay != 0) hash ^= NumTxRelay.GetHashCode();
      if (NumTxRelayCanceled != 0) hash ^= NumTxRelayCanceled.GetHashCode();
      if (HeapTotalBytes != 0) hash ^= HeapTotalBytes.GetHashCode();
      if (HeapFreeBytes != 0) hash ^= HeapFreeBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UptimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UptimeSeconds);
      }
      if (ChannelUtilization != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ChannelUtilization);
      }
      if (AirUtilTx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AirUtilTx);
      }
      if (NumPacketsTx != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumPacketsTx);
      }
      if (NumPacketsRx != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumPacketsRx);
      }
      if (NumPacketsRxBad != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumPacketsRxBad);
      }
      if (NumOnlineNodes != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumOnlineNodes);
      }
      if (NumTotalNodes != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NumTotalNodes);
      }
      if (NumRxDupe != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumRxDupe);
      }
      if (NumTxRelay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NumTxRelay);
      }
      if (NumTxRelayCanceled != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NumTxRelayCanceled);
      }
      if (HeapTotalBytes != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HeapTotalBytes);
      }
      if (HeapFreeBytes != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(HeapFreeBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UptimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UptimeSeconds);
      }
      if (ChannelUtilization != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ChannelUtilization);
      }
      if (AirUtilTx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AirUtilTx);
      }
      if (NumPacketsTx != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumPacketsTx);
      }
      if (NumPacketsRx != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumPacketsRx);
      }
      if (NumPacketsRxBad != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumPacketsRxBad);
      }
      if (NumOnlineNodes != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumOnlineNodes);
      }
      if (NumTotalNodes != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NumTotalNodes);
      }
      if (NumRxDupe != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumRxDupe);
      }
      if (NumTxRelay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NumTxRelay);
      }
      if (NumTxRelayCanceled != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NumTxRelayCanceled);
      }
      if (HeapTotalBytes != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HeapTotalBytes);
      }
      if (HeapFreeBytes != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(HeapFreeBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UptimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UptimeSeconds);
      }
      if (ChannelUtilization != 0F) {
        size += 1 + 4;
      }
      if (AirUtilTx != 0F) {
        size += 1 + 4;
      }
      if (NumPacketsTx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPacketsTx);
      }
      if (NumPacketsRx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPacketsRx);
      }
      if (NumPacketsRxBad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPacketsRxBad);
      }
      if (NumOnlineNodes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOnlineNodes);
      }
      if (NumTotalNodes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTotalNodes);
      }
      if (NumRxDupe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumRxDupe);
      }
      if (NumTxRelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTxRelay);
      }
      if (NumTxRelayCanceled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTxRelayCanceled);
      }
      if (HeapTotalBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeapTotalBytes);
      }
      if (HeapFreeBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeapFreeBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LocalStats other) {
      if (other == null) {
        return;
      }
      if (other.UptimeSeconds != 0) {
        UptimeSeconds = other.UptimeSeconds;
      }
      if (other.ChannelUtilization != 0F) {
        ChannelUtilization = other.ChannelUtilization;
      }
      if (other.AirUtilTx != 0F) {
        AirUtilTx = other.AirUtilTx;
      }
      if (other.NumPacketsTx != 0) {
        NumPacketsTx = other.NumPacketsTx;
      }
      if (other.NumPacketsRx != 0) {
        NumPacketsRx = other.NumPacketsRx;
      }
      if (other.NumPacketsRxBad != 0) {
        NumPacketsRxBad = other.NumPacketsRxBad;
      }
      if (other.NumOnlineNodes != 0) {
        NumOnlineNodes = other.NumOnlineNodes;
      }
      if (other.NumTotalNodes != 0) {
        NumTotalNodes = other.NumTotalNodes;
      }
      if (other.NumRxDupe != 0) {
        NumRxDupe = other.NumRxDupe;
      }
      if (other.NumTxRelay != 0) {
        NumTxRelay = other.NumTxRelay;
      }
      if (other.NumTxRelayCanceled != 0) {
        NumTxRelayCanceled = other.NumTxRelayCanceled;
      }
      if (other.HeapTotalBytes != 0) {
        HeapTotalBytes = other.HeapTotalBytes;
      }
      if (other.HeapFreeBytes != 0) {
        HeapFreeBytes = other.HeapFreeBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UptimeSeconds = input.ReadUInt32();
            break;
          }
          case 21: {
            ChannelUtilization = input.ReadFloat();
            break;
          }
          case 29: {
            AirUtilTx = input.ReadFloat();
            break;
          }
          case 32: {
            NumPacketsTx = input.ReadUInt32();
            break;
          }
          case 40: {
            NumPacketsRx = input.ReadUInt32();
            break;
          }
          case 48: {
            NumPacketsRxBad = input.ReadUInt32();
            break;
          }
          case 56: {
            NumOnlineNodes = input.ReadUInt32();
            break;
          }
          case 64: {
            NumTotalNodes = input.ReadUInt32();
            break;
          }
          case 72: {
            NumRxDupe = input.ReadUInt32();
            break;
          }
          case 80: {
            NumTxRelay = input.ReadUInt32();
            break;
          }
          case 88: {
            NumTxRelayCanceled = input.ReadUInt32();
            break;
          }
          case 96: {
            HeapTotalBytes = input.ReadUInt32();
            break;
          }
          case 104: {
            HeapFreeBytes = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UptimeSeconds = input.ReadUInt32();
            break;
          }
          case 21: {
            ChannelUtilization = input.ReadFloat();
            break;
          }
          case 29: {
            AirUtilTx = input.ReadFloat();
            break;
          }
          case 32: {
            NumPacketsTx = input.ReadUInt32();
            break;
          }
          case 40: {
            NumPacketsRx = input.ReadUInt32();
            break;
          }
          case 48: {
            NumPacketsRxBad = input.ReadUInt32();
            break;
          }
          case 56: {
            NumOnlineNodes = input.ReadUInt32();
            break;
          }
          case 64: {
            NumTotalNodes = input.ReadUInt32();
            break;
          }
          case 72: {
            NumRxDupe = input.ReadUInt32();
            break;
          }
          case 80: {
            NumTxRelay = input.ReadUInt32();
            break;
          }
          case 88: {
            NumTxRelayCanceled = input.ReadUInt32();
            break;
          }
          case 96: {
            HeapTotalBytes = input.ReadUInt32();
            break;
          }
          case 104: {
            HeapFreeBytes = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Health telemetry metrics
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class HealthMetrics : pb::IMessage<HealthMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HealthMetrics> _parser = new pb::MessageParser<HealthMetrics>(() => new HealthMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HealthMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthMetrics(HealthMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      heartBpm_ = other.heartBpm_;
      spO2_ = other.spO2_;
      temperature_ = other.temperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthMetrics Clone() {
      return new HealthMetrics(this);
    }

    /// <summary>Field number for the "heart_bpm" field.</summary>
    public const int HeartBpmFieldNumber = 1;
    private readonly static uint HeartBpmDefaultValue = 0;

    private uint heartBpm_;
    /// <summary>
    ///
    /// Heart rate (beats per minute)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HeartBpm {
      get { if ((_hasBits0 & 1) != 0) { return heartBpm_; } else { return HeartBpmDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heartBpm_ = value;
      }
    }
    /// <summary>Gets whether the "heart_bpm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeartBpm {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "heart_bpm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeartBpm() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "spO2" field.</summary>
    public const int SpO2FieldNumber = 2;
    private readonly static uint SpO2DefaultValue = 0;

    private uint spO2_;
    /// <summary>
    ///
    /// SpO2 (blood oxygen saturation) level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpO2 {
      get { if ((_hasBits0 & 2) != 0) { return spO2_; } else { return SpO2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        spO2_ = value;
      }
    }
    /// <summary>Gets whether the "spO2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpO2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "spO2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpO2() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 3;
    private readonly static float TemperatureDefaultValue = 0F;

    private float temperature_;
    /// <summary>
    ///
    /// Body temperature in degrees Celsius
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Temperature {
      get { if ((_hasBits0 & 4) != 0) { return temperature_; } else { return TemperatureDefaultValue; } }
      set {
        _hasBits0 |= 4;
        temperature_ = value;
      }
    }
    /// <summary>Gets whether the "temperature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTemperature {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "temperature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTemperature() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HealthMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HealthMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeartBpm != other.HeartBpm) return false;
      if (SpO2 != other.SpO2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeartBpm) hash ^= HeartBpm.GetHashCode();
      if (HasSpO2) hash ^= SpO2.GetHashCode();
      if (HasTemperature) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeartBpm) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeartBpm);
      }
      if (HasSpO2) {
        output.WriteRawTag(16);
        output.WriteUInt32(SpO2);
      }
      if (HasTemperature) {
        output.WriteRawTag(29);
        output.WriteFloat(Temperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeartBpm) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeartBpm);
      }
      if (HasSpO2) {
        output.WriteRawTag(16);
        output.WriteUInt32(SpO2);
      }
      if (HasTemperature) {
        output.WriteRawTag(29);
        output.WriteFloat(Temperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHeartBpm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeartBpm);
      }
      if (HasSpO2) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpO2);
      }
      if (HasTemperature) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HealthMetrics other) {
      if (other == null) {
        return;
      }
      if (other.HasHeartBpm) {
        HeartBpm = other.HeartBpm;
      }
      if (other.HasSpO2) {
        SpO2 = other.SpO2;
      }
      if (other.HasTemperature) {
        Temperature = other.Temperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeartBpm = input.ReadUInt32();
            break;
          }
          case 16: {
            SpO2 = input.ReadUInt32();
            break;
          }
          case 29: {
            Temperature = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeartBpm = input.ReadUInt32();
            break;
          }
          case 16: {
            SpO2 = input.ReadUInt32();
            break;
          }
          case 29: {
            Temperature = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Linux host metrics
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class HostMetrics : pb::IMessage<HostMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HostMetrics> _parser = new pb::MessageParser<HostMetrics>(() => new HostMetrics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HostMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HostMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HostMetrics(HostMetrics other) : this() {
      _hasBits0 = other._hasBits0;
      uptimeSeconds_ = other.uptimeSeconds_;
      freememBytes_ = other.freememBytes_;
      diskfree1Bytes_ = other.diskfree1Bytes_;
      diskfree2Bytes_ = other.diskfree2Bytes_;
      diskfree3Bytes_ = other.diskfree3Bytes_;
      load1_ = other.load1_;
      load5_ = other.load5_;
      load15_ = other.load15_;
      userString_ = other.userString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HostMetrics Clone() {
      return new HostMetrics(this);
    }

    /// <summary>Field number for the "uptime_seconds" field.</summary>
    public const int UptimeSecondsFieldNumber = 1;
    private uint uptimeSeconds_;
    /// <summary>
    ///
    /// Host system uptime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UptimeSeconds {
      get { return uptimeSeconds_; }
      set {
        uptimeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "freemem_bytes" field.</summary>
    public const int FreememBytesFieldNumber = 2;
    private ulong freememBytes_;
    /// <summary>
    ///
    /// Host system free memory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FreememBytes {
      get { return freememBytes_; }
      set {
        freememBytes_ = value;
      }
    }

    /// <summary>Field number for the "diskfree1_bytes" field.</summary>
    public const int Diskfree1BytesFieldNumber = 3;
    private ulong diskfree1Bytes_;
    /// <summary>
    ///
    /// Host system disk space free for /
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Diskfree1Bytes {
      get { return diskfree1Bytes_; }
      set {
        diskfree1Bytes_ = value;
      }
    }

    /// <summary>Field number for the "diskfree2_bytes" field.</summary>
    public const int Diskfree2BytesFieldNumber = 4;
    private readonly static ulong Diskfree2BytesDefaultValue = 0UL;

    private ulong diskfree2Bytes_;
    /// <summary>
    ///
    /// Secondary system disk space free
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Diskfree2Bytes {
      get { if ((_hasBits0 & 1) != 0) { return diskfree2Bytes_; } else { return Diskfree2BytesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        diskfree2Bytes_ = value;
      }
    }
    /// <summary>Gets whether the "diskfree2_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDiskfree2Bytes {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "diskfree2_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDiskfree2Bytes() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "diskfree3_bytes" field.</summary>
    public const int Diskfree3BytesFieldNumber = 5;
    private readonly static ulong Diskfree3BytesDefaultValue = 0UL;

    private ulong diskfree3Bytes_;
    /// <summary>
    ///
    /// Tertiary disk space free
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Diskfree3Bytes {
      get { if ((_hasBits0 & 2) != 0) { return diskfree3Bytes_; } else { return Diskfree3BytesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        diskfree3Bytes_ = value;
      }
    }
    /// <summary>Gets whether the "diskfree3_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDiskfree3Bytes {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "diskfree3_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDiskfree3Bytes() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "load1" field.</summary>
    public const int Load1FieldNumber = 6;
    private uint load1_;
    /// <summary>
    ///
    /// Host system one minute load in 1/100ths
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Load1 {
      get { return load1_; }
      set {
        load1_ = value;
      }
    }

    /// <summary>Field number for the "load5" field.</summary>
    public const int Load5FieldNumber = 7;
    private uint load5_;
    /// <summary>
    ///
    /// Host system five minute load  in 1/100ths
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Load5 {
      get { return load5_; }
      set {
        load5_ = value;
      }
    }

    /// <summary>Field number for the "load15" field.</summary>
    public const int Load15FieldNumber = 8;
    private uint load15_;
    /// <summary>
    ///
    /// Host system fifteen minute load  in 1/100ths
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Load15 {
      get { return load15_; }
      set {
        load15_ = value;
      }
    }

    /// <summary>Field number for the "user_string" field.</summary>
    public const int UserStringFieldNumber = 9;
    private readonly static string UserStringDefaultValue = "";

    private string userString_;
    /// <summary>
    ///
    /// Optional User-provided string for arbitrary host system information
    /// that doesn't make sense as a dedicated entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserString {
      get { return userString_ ?? UserStringDefaultValue; }
      set {
        userString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserString {
      get { return userString_ != null; }
    }
    /// <summary>Clears the value of the "user_string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserString() {
      userString_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HostMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HostMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UptimeSeconds != other.UptimeSeconds) return false;
      if (FreememBytes != other.FreememBytes) return false;
      if (Diskfree1Bytes != other.Diskfree1Bytes) return false;
      if (Diskfree2Bytes != other.Diskfree2Bytes) return false;
      if (Diskfree3Bytes != other.Diskfree3Bytes) return false;
      if (Load1 != other.Load1) return false;
      if (Load5 != other.Load5) return false;
      if (Load15 != other.Load15) return false;
      if (UserString != other.UserString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UptimeSeconds != 0) hash ^= UptimeSeconds.GetHashCode();
      if (FreememBytes != 0UL) hash ^= FreememBytes.GetHashCode();
      if (Diskfree1Bytes != 0UL) hash ^= Diskfree1Bytes.GetHashCode();
      if (HasDiskfree2Bytes) hash ^= Diskfree2Bytes.GetHashCode();
      if (HasDiskfree3Bytes) hash ^= Diskfree3Bytes.GetHashCode();
      if (Load1 != 0) hash ^= Load1.GetHashCode();
      if (Load5 != 0) hash ^= Load5.GetHashCode();
      if (Load15 != 0) hash ^= Load15.GetHashCode();
      if (HasUserString) hash ^= UserString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UptimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UptimeSeconds);
      }
      if (FreememBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FreememBytes);
      }
      if (Diskfree1Bytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Diskfree1Bytes);
      }
      if (HasDiskfree2Bytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(Diskfree2Bytes);
      }
      if (HasDiskfree3Bytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(Diskfree3Bytes);
      }
      if (Load1 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Load1);
      }
      if (Load5 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Load5);
      }
      if (Load15 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Load15);
      }
      if (HasUserString) {
        output.WriteRawTag(74);
        output.WriteString(UserString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UptimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UptimeSeconds);
      }
      if (FreememBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FreememBytes);
      }
      if (Diskfree1Bytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Diskfree1Bytes);
      }
      if (HasDiskfree2Bytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(Diskfree2Bytes);
      }
      if (HasDiskfree3Bytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(Diskfree3Bytes);
      }
      if (Load1 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Load1);
      }
      if (Load5 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Load5);
      }
      if (Load15 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Load15);
      }
      if (HasUserString) {
        output.WriteRawTag(74);
        output.WriteString(UserString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UptimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UptimeSeconds);
      }
      if (FreememBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FreememBytes);
      }
      if (Diskfree1Bytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diskfree1Bytes);
      }
      if (HasDiskfree2Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diskfree2Bytes);
      }
      if (HasDiskfree3Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diskfree3Bytes);
      }
      if (Load1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Load1);
      }
      if (Load5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Load5);
      }
      if (Load15 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Load15);
      }
      if (HasUserString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HostMetrics other) {
      if (other == null) {
        return;
      }
      if (other.UptimeSeconds != 0) {
        UptimeSeconds = other.UptimeSeconds;
      }
      if (other.FreememBytes != 0UL) {
        FreememBytes = other.FreememBytes;
      }
      if (other.Diskfree1Bytes != 0UL) {
        Diskfree1Bytes = other.Diskfree1Bytes;
      }
      if (other.HasDiskfree2Bytes) {
        Diskfree2Bytes = other.Diskfree2Bytes;
      }
      if (other.HasDiskfree3Bytes) {
        Diskfree3Bytes = other.Diskfree3Bytes;
      }
      if (other.Load1 != 0) {
        Load1 = other.Load1;
      }
      if (other.Load5 != 0) {
        Load5 = other.Load5;
      }
      if (other.Load15 != 0) {
        Load15 = other.Load15;
      }
      if (other.HasUserString) {
        UserString = other.UserString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UptimeSeconds = input.ReadUInt32();
            break;
          }
          case 16: {
            FreememBytes = input.ReadUInt64();
            break;
          }
          case 24: {
            Diskfree1Bytes = input.ReadUInt64();
            break;
          }
          case 32: {
            Diskfree2Bytes = input.ReadUInt64();
            break;
          }
          case 40: {
            Diskfree3Bytes = input.ReadUInt64();
            break;
          }
          case 48: {
            Load1 = input.ReadUInt32();
            break;
          }
          case 56: {
            Load5 = input.ReadUInt32();
            break;
          }
          case 64: {
            Load15 = input.ReadUInt32();
            break;
          }
          case 74: {
            UserString = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UptimeSeconds = input.ReadUInt32();
            break;
          }
          case 16: {
            FreememBytes = input.ReadUInt64();
            break;
          }
          case 24: {
            Diskfree1Bytes = input.ReadUInt64();
            break;
          }
          case 32: {
            Diskfree2Bytes = input.ReadUInt64();
            break;
          }
          case 40: {
            Diskfree3Bytes = input.ReadUInt64();
            break;
          }
          case 48: {
            Load1 = input.ReadUInt32();
            break;
          }
          case 56: {
            Load5 = input.ReadUInt32();
            break;
          }
          case 64: {
            Load15 = input.ReadUInt32();
            break;
          }
          case 74: {
            UserString = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Types of Measurements the telemetry module is equipped to handle
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Telemetry : pb::IMessage<Telemetry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Telemetry> _parser = new pb::MessageParser<Telemetry>(() => new Telemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Telemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry(Telemetry other) : this() {
      time_ = other.time_;
      switch (other.VariantCase) {
        case VariantOneofCase.DeviceMetrics:
          DeviceMetrics = other.DeviceMetrics.Clone();
          break;
        case VariantOneofCase.EnvironmentMetrics:
          EnvironmentMetrics = other.EnvironmentMetrics.Clone();
          break;
        case VariantOneofCase.AirQualityMetrics:
          AirQualityMetrics = other.AirQualityMetrics.Clone();
          break;
        case VariantOneofCase.PowerMetrics:
          PowerMetrics = other.PowerMetrics.Clone();
          break;
        case VariantOneofCase.LocalStats:
          LocalStats = other.LocalStats.Clone();
          break;
        case VariantOneofCase.HealthMetrics:
          HealthMetrics = other.HealthMetrics.Clone();
          break;
        case VariantOneofCase.HostMetrics:
          HostMetrics = other.HostMetrics.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry Clone() {
      return new Telemetry(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private uint time_;
    /// <summary>
    ///
    /// Seconds since 1970 - or 0 for unknown/unset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "device_metrics" field.</summary>
    public const int DeviceMetricsFieldNumber = 2;
    /// <summary>
    ///
    /// Key native device metrics such as battery level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.DeviceMetrics DeviceMetrics {
      get { return variantCase_ == VariantOneofCase.DeviceMetrics ? (global::Meshtastic.Protobufs.DeviceMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.DeviceMetrics;
      }
    }

    /// <summary>Field number for the "environment_metrics" field.</summary>
    public const int EnvironmentMetricsFieldNumber = 3;
    /// <summary>
    ///
    /// Weather station or other environmental metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.EnvironmentMetrics EnvironmentMetrics {
      get { return variantCase_ == VariantOneofCase.EnvironmentMetrics ? (global::Meshtastic.Protobufs.EnvironmentMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.EnvironmentMetrics;
      }
    }

    /// <summary>Field number for the "air_quality_metrics" field.</summary>
    public const int AirQualityMetricsFieldNumber = 4;
    /// <summary>
    ///
    /// Air quality metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.AirQualityMetrics AirQualityMetrics {
      get { return variantCase_ == VariantOneofCase.AirQualityMetrics ? (global::Meshtastic.Protobufs.AirQualityMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.AirQualityMetrics;
      }
    }

    /// <summary>Field number for the "power_metrics" field.</summary>
    public const int PowerMetricsFieldNumber = 5;
    /// <summary>
    ///
    /// Power Metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.PowerMetrics PowerMetrics {
      get { return variantCase_ == VariantOneofCase.PowerMetrics ? (global::Meshtastic.Protobufs.PowerMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.PowerMetrics;
      }
    }

    /// <summary>Field number for the "local_stats" field.</summary>
    public const int LocalStatsFieldNumber = 6;
    /// <summary>
    ///
    /// Local device mesh statistics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.LocalStats LocalStats {
      get { return variantCase_ == VariantOneofCase.LocalStats ? (global::Meshtastic.Protobufs.LocalStats) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.LocalStats;
      }
    }

    /// <summary>Field number for the "health_metrics" field.</summary>
    public const int HealthMetricsFieldNumber = 7;
    /// <summary>
    ///
    /// Health telemetry metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.HealthMetrics HealthMetrics {
      get { return variantCase_ == VariantOneofCase.HealthMetrics ? (global::Meshtastic.Protobufs.HealthMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.HealthMetrics;
      }
    }

    /// <summary>Field number for the "host_metrics" field.</summary>
    public const int HostMetricsFieldNumber = 8;
    /// <summary>
    ///
    /// Linux host metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.HostMetrics HostMetrics {
      get { return variantCase_ == VariantOneofCase.HostMetrics ? (global::Meshtastic.Protobufs.HostMetrics) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.HostMetrics;
      }
    }

    private object variant_;
    /// <summary>Enum of possible cases for the "variant" oneof.</summary>
    public enum VariantOneofCase {
      None = 0,
      DeviceMetrics = 2,
      EnvironmentMetrics = 3,
      AirQualityMetrics = 4,
      PowerMetrics = 5,
      LocalStats = 6,
      HealthMetrics = 7,
      HostMetrics = 8,
    }
    private VariantOneofCase variantCase_ = VariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VariantOneofCase VariantCase {
      get { return variantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVariant() {
      variantCase_ = VariantOneofCase.None;
      variant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Telemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Telemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!object.Equals(DeviceMetrics, other.DeviceMetrics)) return false;
      if (!object.Equals(EnvironmentMetrics, other.EnvironmentMetrics)) return false;
      if (!object.Equals(AirQualityMetrics, other.AirQualityMetrics)) return false;
      if (!object.Equals(PowerMetrics, other.PowerMetrics)) return false;
      if (!object.Equals(LocalStats, other.LocalStats)) return false;
      if (!object.Equals(HealthMetrics, other.HealthMetrics)) return false;
      if (!object.Equals(HostMetrics, other.HostMetrics)) return false;
      if (VariantCase != other.VariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (variantCase_ == VariantOneofCase.DeviceMetrics) hash ^= DeviceMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) hash ^= EnvironmentMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) hash ^= AirQualityMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.PowerMetrics) hash ^= PowerMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.LocalStats) hash ^= LocalStats.GetHashCode();
      if (variantCase_ == VariantOneofCase.HealthMetrics) hash ^= HealthMetrics.GetHashCode();
      if (variantCase_ == VariantOneofCase.HostMetrics) hash ^= HostMetrics.GetHashCode();
      hash ^= (int) variantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Time);
      }
      if (variantCase_ == VariantOneofCase.DeviceMetrics) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceMetrics);
      }
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
        output.WriteRawTag(26);
        output.WriteMessage(EnvironmentMetrics);
      }
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
        output.WriteRawTag(34);
        output.WriteMessage(AirQualityMetrics);
      }
      if (variantCase_ == VariantOneofCase.PowerMetrics) {
        output.WriteRawTag(42);
        output.WriteMessage(PowerMetrics);
      }
      if (variantCase_ == VariantOneofCase.LocalStats) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalStats);
      }
      if (variantCase_ == VariantOneofCase.HealthMetrics) {
        output.WriteRawTag(58);
        output.WriteMessage(HealthMetrics);
      }
      if (variantCase_ == VariantOneofCase.HostMetrics) {
        output.WriteRawTag(66);
        output.WriteMessage(HostMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Time);
      }
      if (variantCase_ == VariantOneofCase.DeviceMetrics) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceMetrics);
      }
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
        output.WriteRawTag(26);
        output.WriteMessage(EnvironmentMetrics);
      }
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
        output.WriteRawTag(34);
        output.WriteMessage(AirQualityMetrics);
      }
      if (variantCase_ == VariantOneofCase.PowerMetrics) {
        output.WriteRawTag(42);
        output.WriteMessage(PowerMetrics);
      }
      if (variantCase_ == VariantOneofCase.LocalStats) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalStats);
      }
      if (variantCase_ == VariantOneofCase.HealthMetrics) {
        output.WriteRawTag(58);
        output.WriteMessage(HealthMetrics);
      }
      if (variantCase_ == VariantOneofCase.HostMetrics) {
        output.WriteRawTag(66);
        output.WriteMessage(HostMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + 4;
      }
      if (variantCase_ == VariantOneofCase.DeviceMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceMetrics);
      }
      if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentMetrics);
      }
      if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirQualityMetrics);
      }
      if (variantCase_ == VariantOneofCase.PowerMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerMetrics);
      }
      if (variantCase_ == VariantOneofCase.LocalStats) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalStats);
      }
      if (variantCase_ == VariantOneofCase.HealthMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HealthMetrics);
      }
      if (variantCase_ == VariantOneofCase.HostMetrics) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostMetrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Telemetry other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      switch (other.VariantCase) {
        case VariantOneofCase.DeviceMetrics:
          if (DeviceMetrics == null) {
            DeviceMetrics = new global::Meshtastic.Protobufs.DeviceMetrics();
          }
          DeviceMetrics.MergeFrom(other.DeviceMetrics);
          break;
        case VariantOneofCase.EnvironmentMetrics:
          if (EnvironmentMetrics == null) {
            EnvironmentMetrics = new global::Meshtastic.Protobufs.EnvironmentMetrics();
          }
          EnvironmentMetrics.MergeFrom(other.EnvironmentMetrics);
          break;
        case VariantOneofCase.AirQualityMetrics:
          if (AirQualityMetrics == null) {
            AirQualityMetrics = new global::Meshtastic.Protobufs.AirQualityMetrics();
          }
          AirQualityMetrics.MergeFrom(other.AirQualityMetrics);
          break;
        case VariantOneofCase.PowerMetrics:
          if (PowerMetrics == null) {
            PowerMetrics = new global::Meshtastic.Protobufs.PowerMetrics();
          }
          PowerMetrics.MergeFrom(other.PowerMetrics);
          break;
        case VariantOneofCase.LocalStats:
          if (LocalStats == null) {
            LocalStats = new global::Meshtastic.Protobufs.LocalStats();
          }
          LocalStats.MergeFrom(other.LocalStats);
          break;
        case VariantOneofCase.HealthMetrics:
          if (HealthMetrics == null) {
            HealthMetrics = new global::Meshtastic.Protobufs.HealthMetrics();
          }
          HealthMetrics.MergeFrom(other.HealthMetrics);
          break;
        case VariantOneofCase.HostMetrics:
          if (HostMetrics == null) {
            HostMetrics = new global::Meshtastic.Protobufs.HostMetrics();
          }
          HostMetrics.MergeFrom(other.HostMetrics);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFixed32();
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.DeviceMetrics subBuilder = new global::Meshtastic.Protobufs.DeviceMetrics();
            if (variantCase_ == VariantOneofCase.DeviceMetrics) {
              subBuilder.MergeFrom(DeviceMetrics);
            }
            input.ReadMessage(subBuilder);
            DeviceMetrics = subBuilder;
            break;
          }
          case 26: {
            global::Meshtastic.Protobufs.EnvironmentMetrics subBuilder = new global::Meshtastic.Protobufs.EnvironmentMetrics();
            if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
              subBuilder.MergeFrom(EnvironmentMetrics);
            }
            input.ReadMessage(subBuilder);
            EnvironmentMetrics = subBuilder;
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.AirQualityMetrics subBuilder = new global::Meshtastic.Protobufs.AirQualityMetrics();
            if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
              subBuilder.MergeFrom(AirQualityMetrics);
            }
            input.ReadMessage(subBuilder);
            AirQualityMetrics = subBuilder;
            break;
          }
          case 42: {
            global::Meshtastic.Protobufs.PowerMetrics subBuilder = new global::Meshtastic.Protobufs.PowerMetrics();
            if (variantCase_ == VariantOneofCase.PowerMetrics) {
              subBuilder.MergeFrom(PowerMetrics);
            }
            input.ReadMessage(subBuilder);
            PowerMetrics = subBuilder;
            break;
          }
          case 50: {
            global::Meshtastic.Protobufs.LocalStats subBuilder = new global::Meshtastic.Protobufs.LocalStats();
            if (variantCase_ == VariantOneofCase.LocalStats) {
              subBuilder.MergeFrom(LocalStats);
            }
            input.ReadMessage(subBuilder);
            LocalStats = subBuilder;
            break;
          }
          case 58: {
            global::Meshtastic.Protobufs.HealthMetrics subBuilder = new global::Meshtastic.Protobufs.HealthMetrics();
            if (variantCase_ == VariantOneofCase.HealthMetrics) {
              subBuilder.MergeFrom(HealthMetrics);
            }
            input.ReadMessage(subBuilder);
            HealthMetrics = subBuilder;
            break;
          }
          case 66: {
            global::Meshtastic.Protobufs.HostMetrics subBuilder = new global::Meshtastic.Protobufs.HostMetrics();
            if (variantCase_ == VariantOneofCase.HostMetrics) {
              subBuilder.MergeFrom(HostMetrics);
            }
            input.ReadMessage(subBuilder);
            HostMetrics = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Time = input.ReadFixed32();
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.DeviceMetrics subBuilder = new global::Meshtastic.Protobufs.DeviceMetrics();
            if (variantCase_ == VariantOneofCase.DeviceMetrics) {
              subBuilder.MergeFrom(DeviceMetrics);
            }
            input.ReadMessage(subBuilder);
            DeviceMetrics = subBuilder;
            break;
          }
          case 26: {
            global::Meshtastic.Protobufs.EnvironmentMetrics subBuilder = new global::Meshtastic.Protobufs.EnvironmentMetrics();
            if (variantCase_ == VariantOneofCase.EnvironmentMetrics) {
              subBuilder.MergeFrom(EnvironmentMetrics);
            }
            input.ReadMessage(subBuilder);
            EnvironmentMetrics = subBuilder;
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.AirQualityMetrics subBuilder = new global::Meshtastic.Protobufs.AirQualityMetrics();
            if (variantCase_ == VariantOneofCase.AirQualityMetrics) {
              subBuilder.MergeFrom(AirQualityMetrics);
            }
            input.ReadMessage(subBuilder);
            AirQualityMetrics = subBuilder;
            break;
          }
          case 42: {
            global::Meshtastic.Protobufs.PowerMetrics subBuilder = new global::Meshtastic.Protobufs.PowerMetrics();
            if (variantCase_ == VariantOneofCase.PowerMetrics) {
              subBuilder.MergeFrom(PowerMetrics);
            }
            input.ReadMessage(subBuilder);
            PowerMetrics = subBuilder;
            break;
          }
          case 50: {
            global::Meshtastic.Protobufs.LocalStats subBuilder = new global::Meshtastic.Protobufs.LocalStats();
            if (variantCase_ == VariantOneofCase.LocalStats) {
              subBuilder.MergeFrom(LocalStats);
            }
            input.ReadMessage(subBuilder);
            LocalStats = subBuilder;
            break;
          }
          case 58: {
            global::Meshtastic.Protobufs.HealthMetrics subBuilder = new global::Meshtastic.Protobufs.HealthMetrics();
            if (variantCase_ == VariantOneofCase.HealthMetrics) {
              subBuilder.MergeFrom(HealthMetrics);
            }
            input.ReadMessage(subBuilder);
            HealthMetrics = subBuilder;
            break;
          }
          case 66: {
            global::Meshtastic.Protobufs.HostMetrics subBuilder = new global::Meshtastic.Protobufs.HostMetrics();
            if (variantCase_ == VariantOneofCase.HostMetrics) {
              subBuilder.MergeFrom(HostMetrics);
            }
            input.ReadMessage(subBuilder);
            HostMetrics = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// NAU7802 Telemetry configuration, for saving to flash
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Nau7802Config : pb::IMessage<Nau7802Config>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Nau7802Config> _parser = new pb::MessageParser<Nau7802Config>(() => new Nau7802Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Nau7802Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.TelemetryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Nau7802Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Nau7802Config(Nau7802Config other) : this() {
      zeroOffset_ = other.zeroOffset_;
      calibrationFactor_ = other.calibrationFactor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Nau7802Config Clone() {
      return new Nau7802Config(this);
    }

    /// <summary>Field number for the "zeroOffset" field.</summary>
    public const int ZeroOffsetFieldNumber = 1;
    private int zeroOffset_;
    /// <summary>
    ///
    /// The offset setting for the NAU7802
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ZeroOffset {
      get { return zeroOffset_; }
      set {
        zeroOffset_ = value;
      }
    }

    /// <summary>Field number for the "calibrationFactor" field.</summary>
    public const int CalibrationFactorFieldNumber = 2;
    private float calibrationFactor_;
    /// <summary>
    ///
    /// The calibration factor for the NAU7802
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CalibrationFactor {
      get { return calibrationFactor_; }
      set {
        calibrationFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Nau7802Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Nau7802Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZeroOffset != other.ZeroOffset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CalibrationFactor, other.CalibrationFactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ZeroOffset != 0) hash ^= ZeroOffset.GetHashCode();
      if (CalibrationFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CalibrationFactor);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ZeroOffset != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ZeroOffset);
      }
      if (CalibrationFactor != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CalibrationFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ZeroOffset != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ZeroOffset);
      }
      if (CalibrationFactor != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CalibrationFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ZeroOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZeroOffset);
      }
      if (CalibrationFactor != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Nau7802Config other) {
      if (other == null) {
        return;
      }
      if (other.ZeroOffset != 0) {
        ZeroOffset = other.ZeroOffset;
      }
      if (other.CalibrationFactor != 0F) {
        CalibrationFactor = other.CalibrationFactor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ZeroOffset = input.ReadInt32();
            break;
          }
          case 21: {
            CalibrationFactor = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ZeroOffset = input.ReadInt32();
            break;
          }
          case 21: {
            CalibrationFactor = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
